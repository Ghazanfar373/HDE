//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: JSBSimDcps.h
//  Source: JSBSimData/JSBSimDcps.idl
//  Generated: Mon Nov 26 12:02:28 2012
//  OpenSplice V5.5.1OSS
//  
//******************************************************************
#ifndef _JSBSIMDCPS_H_
#define _JSBSIMDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps_builtintopics.h"
#include "dds_builtinTopics.h"
#include "dds_dcps_interfaces.h"
#include "JSBSim.h"

namespace JSBSim
{
   struct position;
   struct accelerations;
   struct atitude;
   struct simulation;
   struct velocities;
   struct atmosphere;
   struct aerosurfaces;
   struct gears;
   struct inertia;
   struct aero;
   struct aerocoefficient;
   struct geometric;
   struct propulsion;
   struct initialConditions;
   struct subSystems;
   struct subSystemOut;

   class positionTypeSupportInterface;

   typedef positionTypeSupportInterface * positionTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < positionTypeSupportInterface> positionTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < positionTypeSupportInterface> positionTypeSupportInterface_out;


   class positionDataWriter;

   typedef positionDataWriter * positionDataWriter_ptr;
   typedef DDS_DCPSInterface_var < positionDataWriter> positionDataWriter_var;
   typedef DDS_DCPSInterface_out < positionDataWriter> positionDataWriter_out;


   class positionDataReader;

   typedef positionDataReader * positionDataReader_ptr;
   typedef DDS_DCPSInterface_var < positionDataReader> positionDataReader_var;
   typedef DDS_DCPSInterface_out < positionDataReader> positionDataReader_out;


   class positionDataReaderView;

   typedef positionDataReaderView * positionDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < positionDataReaderView> positionDataReaderView_var;
   typedef DDS_DCPSInterface_out < positionDataReaderView> positionDataReaderView_out;


   class accelerationsTypeSupportInterface;

   typedef accelerationsTypeSupportInterface * accelerationsTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < accelerationsTypeSupportInterface> accelerationsTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < accelerationsTypeSupportInterface> accelerationsTypeSupportInterface_out;


   class accelerationsDataWriter;

   typedef accelerationsDataWriter * accelerationsDataWriter_ptr;
   typedef DDS_DCPSInterface_var < accelerationsDataWriter> accelerationsDataWriter_var;
   typedef DDS_DCPSInterface_out < accelerationsDataWriter> accelerationsDataWriter_out;


   class accelerationsDataReader;

   typedef accelerationsDataReader * accelerationsDataReader_ptr;
   typedef DDS_DCPSInterface_var < accelerationsDataReader> accelerationsDataReader_var;
   typedef DDS_DCPSInterface_out < accelerationsDataReader> accelerationsDataReader_out;


   class accelerationsDataReaderView;

   typedef accelerationsDataReaderView * accelerationsDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < accelerationsDataReaderView> accelerationsDataReaderView_var;
   typedef DDS_DCPSInterface_out < accelerationsDataReaderView> accelerationsDataReaderView_out;


   class atitudeTypeSupportInterface;

   typedef atitudeTypeSupportInterface * atitudeTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < atitudeTypeSupportInterface> atitudeTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < atitudeTypeSupportInterface> atitudeTypeSupportInterface_out;


   class atitudeDataWriter;

   typedef atitudeDataWriter * atitudeDataWriter_ptr;
   typedef DDS_DCPSInterface_var < atitudeDataWriter> atitudeDataWriter_var;
   typedef DDS_DCPSInterface_out < atitudeDataWriter> atitudeDataWriter_out;


   class atitudeDataReader;

   typedef atitudeDataReader * atitudeDataReader_ptr;
   typedef DDS_DCPSInterface_var < atitudeDataReader> atitudeDataReader_var;
   typedef DDS_DCPSInterface_out < atitudeDataReader> atitudeDataReader_out;


   class atitudeDataReaderView;

   typedef atitudeDataReaderView * atitudeDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < atitudeDataReaderView> atitudeDataReaderView_var;
   typedef DDS_DCPSInterface_out < atitudeDataReaderView> atitudeDataReaderView_out;


   class simulationTypeSupportInterface;

   typedef simulationTypeSupportInterface * simulationTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < simulationTypeSupportInterface> simulationTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < simulationTypeSupportInterface> simulationTypeSupportInterface_out;


   class simulationDataWriter;

   typedef simulationDataWriter * simulationDataWriter_ptr;
   typedef DDS_DCPSInterface_var < simulationDataWriter> simulationDataWriter_var;
   typedef DDS_DCPSInterface_out < simulationDataWriter> simulationDataWriter_out;


   class simulationDataReader;

   typedef simulationDataReader * simulationDataReader_ptr;
   typedef DDS_DCPSInterface_var < simulationDataReader> simulationDataReader_var;
   typedef DDS_DCPSInterface_out < simulationDataReader> simulationDataReader_out;


   class simulationDataReaderView;

   typedef simulationDataReaderView * simulationDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < simulationDataReaderView> simulationDataReaderView_var;
   typedef DDS_DCPSInterface_out < simulationDataReaderView> simulationDataReaderView_out;


   class velocitiesTypeSupportInterface;

   typedef velocitiesTypeSupportInterface * velocitiesTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < velocitiesTypeSupportInterface> velocitiesTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < velocitiesTypeSupportInterface> velocitiesTypeSupportInterface_out;


   class velocitiesDataWriter;

   typedef velocitiesDataWriter * velocitiesDataWriter_ptr;
   typedef DDS_DCPSInterface_var < velocitiesDataWriter> velocitiesDataWriter_var;
   typedef DDS_DCPSInterface_out < velocitiesDataWriter> velocitiesDataWriter_out;


   class velocitiesDataReader;

   typedef velocitiesDataReader * velocitiesDataReader_ptr;
   typedef DDS_DCPSInterface_var < velocitiesDataReader> velocitiesDataReader_var;
   typedef DDS_DCPSInterface_out < velocitiesDataReader> velocitiesDataReader_out;


   class velocitiesDataReaderView;

   typedef velocitiesDataReaderView * velocitiesDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < velocitiesDataReaderView> velocitiesDataReaderView_var;
   typedef DDS_DCPSInterface_out < velocitiesDataReaderView> velocitiesDataReaderView_out;


   class atmosphereTypeSupportInterface;

   typedef atmosphereTypeSupportInterface * atmosphereTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < atmosphereTypeSupportInterface> atmosphereTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < atmosphereTypeSupportInterface> atmosphereTypeSupportInterface_out;


   class atmosphereDataWriter;

   typedef atmosphereDataWriter * atmosphereDataWriter_ptr;
   typedef DDS_DCPSInterface_var < atmosphereDataWriter> atmosphereDataWriter_var;
   typedef DDS_DCPSInterface_out < atmosphereDataWriter> atmosphereDataWriter_out;


   class atmosphereDataReader;

   typedef atmosphereDataReader * atmosphereDataReader_ptr;
   typedef DDS_DCPSInterface_var < atmosphereDataReader> atmosphereDataReader_var;
   typedef DDS_DCPSInterface_out < atmosphereDataReader> atmosphereDataReader_out;


   class atmosphereDataReaderView;

   typedef atmosphereDataReaderView * atmosphereDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < atmosphereDataReaderView> atmosphereDataReaderView_var;
   typedef DDS_DCPSInterface_out < atmosphereDataReaderView> atmosphereDataReaderView_out;


   class aerosurfacesTypeSupportInterface;

   typedef aerosurfacesTypeSupportInterface * aerosurfacesTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < aerosurfacesTypeSupportInterface> aerosurfacesTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < aerosurfacesTypeSupportInterface> aerosurfacesTypeSupportInterface_out;


   class aerosurfacesDataWriter;

   typedef aerosurfacesDataWriter * aerosurfacesDataWriter_ptr;
   typedef DDS_DCPSInterface_var < aerosurfacesDataWriter> aerosurfacesDataWriter_var;
   typedef DDS_DCPSInterface_out < aerosurfacesDataWriter> aerosurfacesDataWriter_out;


   class aerosurfacesDataReader;

   typedef aerosurfacesDataReader * aerosurfacesDataReader_ptr;
   typedef DDS_DCPSInterface_var < aerosurfacesDataReader> aerosurfacesDataReader_var;
   typedef DDS_DCPSInterface_out < aerosurfacesDataReader> aerosurfacesDataReader_out;


   class aerosurfacesDataReaderView;

   typedef aerosurfacesDataReaderView * aerosurfacesDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < aerosurfacesDataReaderView> aerosurfacesDataReaderView_var;
   typedef DDS_DCPSInterface_out < aerosurfacesDataReaderView> aerosurfacesDataReaderView_out;


   class gearsTypeSupportInterface;

   typedef gearsTypeSupportInterface * gearsTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < gearsTypeSupportInterface> gearsTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < gearsTypeSupportInterface> gearsTypeSupportInterface_out;


   class gearsDataWriter;

   typedef gearsDataWriter * gearsDataWriter_ptr;
   typedef DDS_DCPSInterface_var < gearsDataWriter> gearsDataWriter_var;
   typedef DDS_DCPSInterface_out < gearsDataWriter> gearsDataWriter_out;


   class gearsDataReader;

   typedef gearsDataReader * gearsDataReader_ptr;
   typedef DDS_DCPSInterface_var < gearsDataReader> gearsDataReader_var;
   typedef DDS_DCPSInterface_out < gearsDataReader> gearsDataReader_out;


   class gearsDataReaderView;

   typedef gearsDataReaderView * gearsDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < gearsDataReaderView> gearsDataReaderView_var;
   typedef DDS_DCPSInterface_out < gearsDataReaderView> gearsDataReaderView_out;


   class inertiaTypeSupportInterface;

   typedef inertiaTypeSupportInterface * inertiaTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < inertiaTypeSupportInterface> inertiaTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < inertiaTypeSupportInterface> inertiaTypeSupportInterface_out;


   class inertiaDataWriter;

   typedef inertiaDataWriter * inertiaDataWriter_ptr;
   typedef DDS_DCPSInterface_var < inertiaDataWriter> inertiaDataWriter_var;
   typedef DDS_DCPSInterface_out < inertiaDataWriter> inertiaDataWriter_out;


   class inertiaDataReader;

   typedef inertiaDataReader * inertiaDataReader_ptr;
   typedef DDS_DCPSInterface_var < inertiaDataReader> inertiaDataReader_var;
   typedef DDS_DCPSInterface_out < inertiaDataReader> inertiaDataReader_out;


   class inertiaDataReaderView;

   typedef inertiaDataReaderView * inertiaDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < inertiaDataReaderView> inertiaDataReaderView_var;
   typedef DDS_DCPSInterface_out < inertiaDataReaderView> inertiaDataReaderView_out;


   class aeroTypeSupportInterface;

   typedef aeroTypeSupportInterface * aeroTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < aeroTypeSupportInterface> aeroTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < aeroTypeSupportInterface> aeroTypeSupportInterface_out;


   class aeroDataWriter;

   typedef aeroDataWriter * aeroDataWriter_ptr;
   typedef DDS_DCPSInterface_var < aeroDataWriter> aeroDataWriter_var;
   typedef DDS_DCPSInterface_out < aeroDataWriter> aeroDataWriter_out;


   class aeroDataReader;

   typedef aeroDataReader * aeroDataReader_ptr;
   typedef DDS_DCPSInterface_var < aeroDataReader> aeroDataReader_var;
   typedef DDS_DCPSInterface_out < aeroDataReader> aeroDataReader_out;


   class aeroDataReaderView;

   typedef aeroDataReaderView * aeroDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < aeroDataReaderView> aeroDataReaderView_var;
   typedef DDS_DCPSInterface_out < aeroDataReaderView> aeroDataReaderView_out;


   class aerocoefficientTypeSupportInterface;

   typedef aerocoefficientTypeSupportInterface * aerocoefficientTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < aerocoefficientTypeSupportInterface> aerocoefficientTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < aerocoefficientTypeSupportInterface> aerocoefficientTypeSupportInterface_out;


   class aerocoefficientDataWriter;

   typedef aerocoefficientDataWriter * aerocoefficientDataWriter_ptr;
   typedef DDS_DCPSInterface_var < aerocoefficientDataWriter> aerocoefficientDataWriter_var;
   typedef DDS_DCPSInterface_out < aerocoefficientDataWriter> aerocoefficientDataWriter_out;


   class aerocoefficientDataReader;

   typedef aerocoefficientDataReader * aerocoefficientDataReader_ptr;
   typedef DDS_DCPSInterface_var < aerocoefficientDataReader> aerocoefficientDataReader_var;
   typedef DDS_DCPSInterface_out < aerocoefficientDataReader> aerocoefficientDataReader_out;


   class aerocoefficientDataReaderView;

   typedef aerocoefficientDataReaderView * aerocoefficientDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < aerocoefficientDataReaderView> aerocoefficientDataReaderView_var;
   typedef DDS_DCPSInterface_out < aerocoefficientDataReaderView> aerocoefficientDataReaderView_out;


   class geometricTypeSupportInterface;

   typedef geometricTypeSupportInterface * geometricTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < geometricTypeSupportInterface> geometricTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < geometricTypeSupportInterface> geometricTypeSupportInterface_out;


   class geometricDataWriter;

   typedef geometricDataWriter * geometricDataWriter_ptr;
   typedef DDS_DCPSInterface_var < geometricDataWriter> geometricDataWriter_var;
   typedef DDS_DCPSInterface_out < geometricDataWriter> geometricDataWriter_out;


   class geometricDataReader;

   typedef geometricDataReader * geometricDataReader_ptr;
   typedef DDS_DCPSInterface_var < geometricDataReader> geometricDataReader_var;
   typedef DDS_DCPSInterface_out < geometricDataReader> geometricDataReader_out;


   class geometricDataReaderView;

   typedef geometricDataReaderView * geometricDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < geometricDataReaderView> geometricDataReaderView_var;
   typedef DDS_DCPSInterface_out < geometricDataReaderView> geometricDataReaderView_out;


   class propulsionTypeSupportInterface;

   typedef propulsionTypeSupportInterface * propulsionTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < propulsionTypeSupportInterface> propulsionTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < propulsionTypeSupportInterface> propulsionTypeSupportInterface_out;


   class propulsionDataWriter;

   typedef propulsionDataWriter * propulsionDataWriter_ptr;
   typedef DDS_DCPSInterface_var < propulsionDataWriter> propulsionDataWriter_var;
   typedef DDS_DCPSInterface_out < propulsionDataWriter> propulsionDataWriter_out;


   class propulsionDataReader;

   typedef propulsionDataReader * propulsionDataReader_ptr;
   typedef DDS_DCPSInterface_var < propulsionDataReader> propulsionDataReader_var;
   typedef DDS_DCPSInterface_out < propulsionDataReader> propulsionDataReader_out;


   class propulsionDataReaderView;

   typedef propulsionDataReaderView * propulsionDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < propulsionDataReaderView> propulsionDataReaderView_var;
   typedef DDS_DCPSInterface_out < propulsionDataReaderView> propulsionDataReaderView_out;


   class initialConditionsTypeSupportInterface;

   typedef initialConditionsTypeSupportInterface * initialConditionsTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < initialConditionsTypeSupportInterface> initialConditionsTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < initialConditionsTypeSupportInterface> initialConditionsTypeSupportInterface_out;


   class initialConditionsDataWriter;

   typedef initialConditionsDataWriter * initialConditionsDataWriter_ptr;
   typedef DDS_DCPSInterface_var < initialConditionsDataWriter> initialConditionsDataWriter_var;
   typedef DDS_DCPSInterface_out < initialConditionsDataWriter> initialConditionsDataWriter_out;


   class initialConditionsDataReader;

   typedef initialConditionsDataReader * initialConditionsDataReader_ptr;
   typedef DDS_DCPSInterface_var < initialConditionsDataReader> initialConditionsDataReader_var;
   typedef DDS_DCPSInterface_out < initialConditionsDataReader> initialConditionsDataReader_out;


   class initialConditionsDataReaderView;

   typedef initialConditionsDataReaderView * initialConditionsDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < initialConditionsDataReaderView> initialConditionsDataReaderView_var;
   typedef DDS_DCPSInterface_out < initialConditionsDataReaderView> initialConditionsDataReaderView_out;


   class subSystemsTypeSupportInterface;

   typedef subSystemsTypeSupportInterface * subSystemsTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < subSystemsTypeSupportInterface> subSystemsTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < subSystemsTypeSupportInterface> subSystemsTypeSupportInterface_out;


   class subSystemsDataWriter;

   typedef subSystemsDataWriter * subSystemsDataWriter_ptr;
   typedef DDS_DCPSInterface_var < subSystemsDataWriter> subSystemsDataWriter_var;
   typedef DDS_DCPSInterface_out < subSystemsDataWriter> subSystemsDataWriter_out;


   class subSystemsDataReader;

   typedef subSystemsDataReader * subSystemsDataReader_ptr;
   typedef DDS_DCPSInterface_var < subSystemsDataReader> subSystemsDataReader_var;
   typedef DDS_DCPSInterface_out < subSystemsDataReader> subSystemsDataReader_out;


   class subSystemsDataReaderView;

   typedef subSystemsDataReaderView * subSystemsDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < subSystemsDataReaderView> subSystemsDataReaderView_var;
   typedef DDS_DCPSInterface_out < subSystemsDataReaderView> subSystemsDataReaderView_out;


   class subSystemOutTypeSupportInterface;

   typedef subSystemOutTypeSupportInterface * subSystemOutTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < subSystemOutTypeSupportInterface> subSystemOutTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < subSystemOutTypeSupportInterface> subSystemOutTypeSupportInterface_out;


   class subSystemOutDataWriter;

   typedef subSystemOutDataWriter * subSystemOutDataWriter_ptr;
   typedef DDS_DCPSInterface_var < subSystemOutDataWriter> subSystemOutDataWriter_var;
   typedef DDS_DCPSInterface_out < subSystemOutDataWriter> subSystemOutDataWriter_out;


   class subSystemOutDataReader;

   typedef subSystemOutDataReader * subSystemOutDataReader_ptr;
   typedef DDS_DCPSInterface_var < subSystemOutDataReader> subSystemOutDataReader_var;
   typedef DDS_DCPSInterface_out < subSystemOutDataReader> subSystemOutDataReader_out;


   class subSystemOutDataReaderView;

   typedef subSystemOutDataReaderView * subSystemOutDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < subSystemOutDataReaderView> subSystemOutDataReaderView_var;
   typedef DDS_DCPSInterface_out < subSystemOutDataReaderView> subSystemOutDataReaderView_out;

   struct positionSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < position, struct positionSeq_uniq_> positionSeq;
   typedef DDS_DCPSSequence_var < positionSeq> positionSeq_var;
   typedef DDS_DCPSSequence_out < positionSeq> positionSeq_out;
   class positionTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef positionTypeSupportInterface_ptr _ptr_type;
      typedef positionTypeSupportInterface_var _var_type;

      static positionTypeSupportInterface_ptr _duplicate (positionTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static positionTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static positionTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static positionTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      positionTypeSupportInterface_ptr _this () { return this; }


   protected:
      positionTypeSupportInterface () {};
      ~positionTypeSupportInterface () {};
   private:
      positionTypeSupportInterface (const positionTypeSupportInterface &);
      positionTypeSupportInterface & operator = (const positionTypeSupportInterface &);
   };

   class positionDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef positionDataWriter_ptr _ptr_type;
      typedef positionDataWriter_var _var_type;

      static positionDataWriter_ptr _duplicate (positionDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static positionDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static positionDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static positionDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      positionDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const position& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const position& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const position& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const position& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const position& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const position& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const position& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const position& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const position& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const position& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (position& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const position& instance_data) = 0;

   protected:
      positionDataWriter () {};
      ~positionDataWriter () {};
   private:
      positionDataWriter (const positionDataWriter &);
      positionDataWriter & operator = (const positionDataWriter &);
   };

   class positionDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef positionDataReader_ptr _ptr_type;
      typedef positionDataReader_var _var_type;

      static positionDataReader_ptr _duplicate (positionDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static positionDataReader_ptr _narrow (DDS::Object_ptr obj);
      static positionDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static positionDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      positionDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (position& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (position& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (positionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (position& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const position& instance) = 0;

   protected:
      positionDataReader () {};
      ~positionDataReader () {};
   private:
      positionDataReader (const positionDataReader &);
      positionDataReader & operator = (const positionDataReader &);
   };

   class positionDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef positionDataReaderView_ptr _ptr_type;
      typedef positionDataReaderView_var _var_type;

      static positionDataReaderView_ptr _duplicate (positionDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static positionDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static positionDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static positionDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      positionDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (position& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (position& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (positionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (positionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (position& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const position& instance) = 0;

   protected:
      positionDataReaderView () {};
      ~positionDataReaderView () {};
   private:
      positionDataReaderView (const positionDataReaderView &);
      positionDataReaderView & operator = (const positionDataReaderView &);
   };

   struct accelerationsSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < accelerations, struct accelerationsSeq_uniq_> accelerationsSeq;
   typedef DDS_DCPSSequence_var < accelerationsSeq> accelerationsSeq_var;
   typedef DDS_DCPSSequence_out < accelerationsSeq> accelerationsSeq_out;
   class accelerationsTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef accelerationsTypeSupportInterface_ptr _ptr_type;
      typedef accelerationsTypeSupportInterface_var _var_type;

      static accelerationsTypeSupportInterface_ptr _duplicate (accelerationsTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static accelerationsTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static accelerationsTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static accelerationsTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      accelerationsTypeSupportInterface_ptr _this () { return this; }


   protected:
      accelerationsTypeSupportInterface () {};
      ~accelerationsTypeSupportInterface () {};
   private:
      accelerationsTypeSupportInterface (const accelerationsTypeSupportInterface &);
      accelerationsTypeSupportInterface & operator = (const accelerationsTypeSupportInterface &);
   };

   class accelerationsDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef accelerationsDataWriter_ptr _ptr_type;
      typedef accelerationsDataWriter_var _var_type;

      static accelerationsDataWriter_ptr _duplicate (accelerationsDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static accelerationsDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static accelerationsDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static accelerationsDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      accelerationsDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const accelerations& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const accelerations& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const accelerations& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const accelerations& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const accelerations& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const accelerations& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const accelerations& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const accelerations& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const accelerations& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const accelerations& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (accelerations& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const accelerations& instance_data) = 0;

   protected:
      accelerationsDataWriter () {};
      ~accelerationsDataWriter () {};
   private:
      accelerationsDataWriter (const accelerationsDataWriter &);
      accelerationsDataWriter & operator = (const accelerationsDataWriter &);
   };

   class accelerationsDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef accelerationsDataReader_ptr _ptr_type;
      typedef accelerationsDataReader_var _var_type;

      static accelerationsDataReader_ptr _duplicate (accelerationsDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static accelerationsDataReader_ptr _narrow (DDS::Object_ptr obj);
      static accelerationsDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static accelerationsDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      accelerationsDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (accelerations& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (accelerations& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (accelerations& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const accelerations& instance) = 0;

   protected:
      accelerationsDataReader () {};
      ~accelerationsDataReader () {};
   private:
      accelerationsDataReader (const accelerationsDataReader &);
      accelerationsDataReader & operator = (const accelerationsDataReader &);
   };

   class accelerationsDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef accelerationsDataReaderView_ptr _ptr_type;
      typedef accelerationsDataReaderView_var _var_type;

      static accelerationsDataReaderView_ptr _duplicate (accelerationsDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static accelerationsDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static accelerationsDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static accelerationsDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      accelerationsDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (accelerations& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (accelerations& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (accelerationsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (accelerations& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const accelerations& instance) = 0;

   protected:
      accelerationsDataReaderView () {};
      ~accelerationsDataReaderView () {};
   private:
      accelerationsDataReaderView (const accelerationsDataReaderView &);
      accelerationsDataReaderView & operator = (const accelerationsDataReaderView &);
   };

   struct atitudeSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < atitude, struct atitudeSeq_uniq_> atitudeSeq;
   typedef DDS_DCPSSequence_var < atitudeSeq> atitudeSeq_var;
   typedef DDS_DCPSSequence_out < atitudeSeq> atitudeSeq_out;
   class atitudeTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef atitudeTypeSupportInterface_ptr _ptr_type;
      typedef atitudeTypeSupportInterface_var _var_type;

      static atitudeTypeSupportInterface_ptr _duplicate (atitudeTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static atitudeTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static atitudeTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static atitudeTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      atitudeTypeSupportInterface_ptr _this () { return this; }


   protected:
      atitudeTypeSupportInterface () {};
      ~atitudeTypeSupportInterface () {};
   private:
      atitudeTypeSupportInterface (const atitudeTypeSupportInterface &);
      atitudeTypeSupportInterface & operator = (const atitudeTypeSupportInterface &);
   };

   class atitudeDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef atitudeDataWriter_ptr _ptr_type;
      typedef atitudeDataWriter_var _var_type;

      static atitudeDataWriter_ptr _duplicate (atitudeDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static atitudeDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static atitudeDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static atitudeDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      atitudeDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const atitude& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const atitude& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const atitude& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const atitude& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const atitude& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const atitude& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const atitude& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const atitude& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const atitude& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const atitude& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (atitude& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const atitude& instance_data) = 0;

   protected:
      atitudeDataWriter () {};
      ~atitudeDataWriter () {};
   private:
      atitudeDataWriter (const atitudeDataWriter &);
      atitudeDataWriter & operator = (const atitudeDataWriter &);
   };

   class atitudeDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef atitudeDataReader_ptr _ptr_type;
      typedef atitudeDataReader_var _var_type;

      static atitudeDataReader_ptr _duplicate (atitudeDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static atitudeDataReader_ptr _narrow (DDS::Object_ptr obj);
      static atitudeDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static atitudeDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      atitudeDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (atitude& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (atitude& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (atitude& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const atitude& instance) = 0;

   protected:
      atitudeDataReader () {};
      ~atitudeDataReader () {};
   private:
      atitudeDataReader (const atitudeDataReader &);
      atitudeDataReader & operator = (const atitudeDataReader &);
   };

   class atitudeDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef atitudeDataReaderView_ptr _ptr_type;
      typedef atitudeDataReaderView_var _var_type;

      static atitudeDataReaderView_ptr _duplicate (atitudeDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static atitudeDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static atitudeDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static atitudeDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      atitudeDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (atitude& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (atitude& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (atitudeSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (atitude& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const atitude& instance) = 0;

   protected:
      atitudeDataReaderView () {};
      ~atitudeDataReaderView () {};
   private:
      atitudeDataReaderView (const atitudeDataReaderView &);
      atitudeDataReaderView & operator = (const atitudeDataReaderView &);
   };

   struct simulationSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < simulation, struct simulationSeq_uniq_> simulationSeq;
   typedef DDS_DCPSSequence_var < simulationSeq> simulationSeq_var;
   typedef DDS_DCPSSequence_out < simulationSeq> simulationSeq_out;
   class simulationTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef simulationTypeSupportInterface_ptr _ptr_type;
      typedef simulationTypeSupportInterface_var _var_type;

      static simulationTypeSupportInterface_ptr _duplicate (simulationTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static simulationTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static simulationTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static simulationTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      simulationTypeSupportInterface_ptr _this () { return this; }


   protected:
      simulationTypeSupportInterface () {};
      ~simulationTypeSupportInterface () {};
   private:
      simulationTypeSupportInterface (const simulationTypeSupportInterface &);
      simulationTypeSupportInterface & operator = (const simulationTypeSupportInterface &);
   };

   class simulationDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef simulationDataWriter_ptr _ptr_type;
      typedef simulationDataWriter_var _var_type;

      static simulationDataWriter_ptr _duplicate (simulationDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static simulationDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static simulationDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static simulationDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      simulationDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const simulation& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const simulation& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const simulation& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const simulation& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const simulation& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const simulation& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const simulation& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const simulation& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const simulation& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const simulation& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (simulation& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const simulation& instance_data) = 0;

   protected:
      simulationDataWriter () {};
      ~simulationDataWriter () {};
   private:
      simulationDataWriter (const simulationDataWriter &);
      simulationDataWriter & operator = (const simulationDataWriter &);
   };

   class simulationDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef simulationDataReader_ptr _ptr_type;
      typedef simulationDataReader_var _var_type;

      static simulationDataReader_ptr _duplicate (simulationDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static simulationDataReader_ptr _narrow (DDS::Object_ptr obj);
      static simulationDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static simulationDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      simulationDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (simulation& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (simulation& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (simulation& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const simulation& instance) = 0;

   protected:
      simulationDataReader () {};
      ~simulationDataReader () {};
   private:
      simulationDataReader (const simulationDataReader &);
      simulationDataReader & operator = (const simulationDataReader &);
   };

   class simulationDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef simulationDataReaderView_ptr _ptr_type;
      typedef simulationDataReaderView_var _var_type;

      static simulationDataReaderView_ptr _duplicate (simulationDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static simulationDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static simulationDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static simulationDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      simulationDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (simulation& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (simulation& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (simulationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (simulation& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const simulation& instance) = 0;

   protected:
      simulationDataReaderView () {};
      ~simulationDataReaderView () {};
   private:
      simulationDataReaderView (const simulationDataReaderView &);
      simulationDataReaderView & operator = (const simulationDataReaderView &);
   };

   struct velocitiesSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < velocities, struct velocitiesSeq_uniq_> velocitiesSeq;
   typedef DDS_DCPSSequence_var < velocitiesSeq> velocitiesSeq_var;
   typedef DDS_DCPSSequence_out < velocitiesSeq> velocitiesSeq_out;
   class velocitiesTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef velocitiesTypeSupportInterface_ptr _ptr_type;
      typedef velocitiesTypeSupportInterface_var _var_type;

      static velocitiesTypeSupportInterface_ptr _duplicate (velocitiesTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static velocitiesTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static velocitiesTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static velocitiesTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      velocitiesTypeSupportInterface_ptr _this () { return this; }


   protected:
      velocitiesTypeSupportInterface () {};
      ~velocitiesTypeSupportInterface () {};
   private:
      velocitiesTypeSupportInterface (const velocitiesTypeSupportInterface &);
      velocitiesTypeSupportInterface & operator = (const velocitiesTypeSupportInterface &);
   };

   class velocitiesDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef velocitiesDataWriter_ptr _ptr_type;
      typedef velocitiesDataWriter_var _var_type;

      static velocitiesDataWriter_ptr _duplicate (velocitiesDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static velocitiesDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static velocitiesDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static velocitiesDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      velocitiesDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const velocities& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const velocities& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const velocities& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const velocities& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const velocities& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const velocities& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const velocities& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const velocities& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const velocities& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const velocities& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (velocities& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const velocities& instance_data) = 0;

   protected:
      velocitiesDataWriter () {};
      ~velocitiesDataWriter () {};
   private:
      velocitiesDataWriter (const velocitiesDataWriter &);
      velocitiesDataWriter & operator = (const velocitiesDataWriter &);
   };

   class velocitiesDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef velocitiesDataReader_ptr _ptr_type;
      typedef velocitiesDataReader_var _var_type;

      static velocitiesDataReader_ptr _duplicate (velocitiesDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static velocitiesDataReader_ptr _narrow (DDS::Object_ptr obj);
      static velocitiesDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static velocitiesDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      velocitiesDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (velocities& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (velocities& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (velocities& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const velocities& instance) = 0;

   protected:
      velocitiesDataReader () {};
      ~velocitiesDataReader () {};
   private:
      velocitiesDataReader (const velocitiesDataReader &);
      velocitiesDataReader & operator = (const velocitiesDataReader &);
   };

   class velocitiesDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef velocitiesDataReaderView_ptr _ptr_type;
      typedef velocitiesDataReaderView_var _var_type;

      static velocitiesDataReaderView_ptr _duplicate (velocitiesDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static velocitiesDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static velocitiesDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static velocitiesDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      velocitiesDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (velocities& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (velocities& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (velocitiesSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (velocities& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const velocities& instance) = 0;

   protected:
      velocitiesDataReaderView () {};
      ~velocitiesDataReaderView () {};
   private:
      velocitiesDataReaderView (const velocitiesDataReaderView &);
      velocitiesDataReaderView & operator = (const velocitiesDataReaderView &);
   };

   struct atmosphereSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < atmosphere, struct atmosphereSeq_uniq_> atmosphereSeq;
   typedef DDS_DCPSSequence_var < atmosphereSeq> atmosphereSeq_var;
   typedef DDS_DCPSSequence_out < atmosphereSeq> atmosphereSeq_out;
   class atmosphereTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef atmosphereTypeSupportInterface_ptr _ptr_type;
      typedef atmosphereTypeSupportInterface_var _var_type;

      static atmosphereTypeSupportInterface_ptr _duplicate (atmosphereTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static atmosphereTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static atmosphereTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static atmosphereTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      atmosphereTypeSupportInterface_ptr _this () { return this; }


   protected:
      atmosphereTypeSupportInterface () {};
      ~atmosphereTypeSupportInterface () {};
   private:
      atmosphereTypeSupportInterface (const atmosphereTypeSupportInterface &);
      atmosphereTypeSupportInterface & operator = (const atmosphereTypeSupportInterface &);
   };

   class atmosphereDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef atmosphereDataWriter_ptr _ptr_type;
      typedef atmosphereDataWriter_var _var_type;

      static atmosphereDataWriter_ptr _duplicate (atmosphereDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static atmosphereDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static atmosphereDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static atmosphereDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      atmosphereDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const atmosphere& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const atmosphere& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const atmosphere& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const atmosphere& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const atmosphere& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const atmosphere& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const atmosphere& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const atmosphere& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const atmosphere& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const atmosphere& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (atmosphere& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const atmosphere& instance_data) = 0;

   protected:
      atmosphereDataWriter () {};
      ~atmosphereDataWriter () {};
   private:
      atmosphereDataWriter (const atmosphereDataWriter &);
      atmosphereDataWriter & operator = (const atmosphereDataWriter &);
   };

   class atmosphereDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef atmosphereDataReader_ptr _ptr_type;
      typedef atmosphereDataReader_var _var_type;

      static atmosphereDataReader_ptr _duplicate (atmosphereDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static atmosphereDataReader_ptr _narrow (DDS::Object_ptr obj);
      static atmosphereDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static atmosphereDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      atmosphereDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (atmosphere& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (atmosphere& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (atmosphere& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const atmosphere& instance) = 0;

   protected:
      atmosphereDataReader () {};
      ~atmosphereDataReader () {};
   private:
      atmosphereDataReader (const atmosphereDataReader &);
      atmosphereDataReader & operator = (const atmosphereDataReader &);
   };

   class atmosphereDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef atmosphereDataReaderView_ptr _ptr_type;
      typedef atmosphereDataReaderView_var _var_type;

      static atmosphereDataReaderView_ptr _duplicate (atmosphereDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static atmosphereDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static atmosphereDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static atmosphereDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      atmosphereDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (atmosphere& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (atmosphere& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (atmosphereSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (atmosphere& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const atmosphere& instance) = 0;

   protected:
      atmosphereDataReaderView () {};
      ~atmosphereDataReaderView () {};
   private:
      atmosphereDataReaderView (const atmosphereDataReaderView &);
      atmosphereDataReaderView & operator = (const atmosphereDataReaderView &);
   };

   struct aerosurfacesSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < aerosurfaces, struct aerosurfacesSeq_uniq_> aerosurfacesSeq;
   typedef DDS_DCPSSequence_var < aerosurfacesSeq> aerosurfacesSeq_var;
   typedef DDS_DCPSSequence_out < aerosurfacesSeq> aerosurfacesSeq_out;
   class aerosurfacesTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef aerosurfacesTypeSupportInterface_ptr _ptr_type;
      typedef aerosurfacesTypeSupportInterface_var _var_type;

      static aerosurfacesTypeSupportInterface_ptr _duplicate (aerosurfacesTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aerosurfacesTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static aerosurfacesTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aerosurfacesTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      aerosurfacesTypeSupportInterface_ptr _this () { return this; }


   protected:
      aerosurfacesTypeSupportInterface () {};
      ~aerosurfacesTypeSupportInterface () {};
   private:
      aerosurfacesTypeSupportInterface (const aerosurfacesTypeSupportInterface &);
      aerosurfacesTypeSupportInterface & operator = (const aerosurfacesTypeSupportInterface &);
   };

   class aerosurfacesDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef aerosurfacesDataWriter_ptr _ptr_type;
      typedef aerosurfacesDataWriter_var _var_type;

      static aerosurfacesDataWriter_ptr _duplicate (aerosurfacesDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aerosurfacesDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static aerosurfacesDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aerosurfacesDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      aerosurfacesDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const aerosurfaces& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const aerosurfaces& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const aerosurfaces& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const aerosurfaces& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const aerosurfaces& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const aerosurfaces& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const aerosurfaces& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const aerosurfaces& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const aerosurfaces& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const aerosurfaces& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (aerosurfaces& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const aerosurfaces& instance_data) = 0;

   protected:
      aerosurfacesDataWriter () {};
      ~aerosurfacesDataWriter () {};
   private:
      aerosurfacesDataWriter (const aerosurfacesDataWriter &);
      aerosurfacesDataWriter & operator = (const aerosurfacesDataWriter &);
   };

   class aerosurfacesDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef aerosurfacesDataReader_ptr _ptr_type;
      typedef aerosurfacesDataReader_var _var_type;

      static aerosurfacesDataReader_ptr _duplicate (aerosurfacesDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aerosurfacesDataReader_ptr _narrow (DDS::Object_ptr obj);
      static aerosurfacesDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aerosurfacesDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      aerosurfacesDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (aerosurfaces& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (aerosurfaces& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (aerosurfaces& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const aerosurfaces& instance) = 0;

   protected:
      aerosurfacesDataReader () {};
      ~aerosurfacesDataReader () {};
   private:
      aerosurfacesDataReader (const aerosurfacesDataReader &);
      aerosurfacesDataReader & operator = (const aerosurfacesDataReader &);
   };

   class aerosurfacesDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef aerosurfacesDataReaderView_ptr _ptr_type;
      typedef aerosurfacesDataReaderView_var _var_type;

      static aerosurfacesDataReaderView_ptr _duplicate (aerosurfacesDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aerosurfacesDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static aerosurfacesDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aerosurfacesDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      aerosurfacesDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (aerosurfaces& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (aerosurfaces& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (aerosurfacesSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (aerosurfaces& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const aerosurfaces& instance) = 0;

   protected:
      aerosurfacesDataReaderView () {};
      ~aerosurfacesDataReaderView () {};
   private:
      aerosurfacesDataReaderView (const aerosurfacesDataReaderView &);
      aerosurfacesDataReaderView & operator = (const aerosurfacesDataReaderView &);
   };

   struct gearsSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < gears, struct gearsSeq_uniq_> gearsSeq;
   typedef DDS_DCPSSequence_var < gearsSeq> gearsSeq_var;
   typedef DDS_DCPSSequence_out < gearsSeq> gearsSeq_out;
   class gearsTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef gearsTypeSupportInterface_ptr _ptr_type;
      typedef gearsTypeSupportInterface_var _var_type;

      static gearsTypeSupportInterface_ptr _duplicate (gearsTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static gearsTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static gearsTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static gearsTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      gearsTypeSupportInterface_ptr _this () { return this; }


   protected:
      gearsTypeSupportInterface () {};
      ~gearsTypeSupportInterface () {};
   private:
      gearsTypeSupportInterface (const gearsTypeSupportInterface &);
      gearsTypeSupportInterface & operator = (const gearsTypeSupportInterface &);
   };

   class gearsDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef gearsDataWriter_ptr _ptr_type;
      typedef gearsDataWriter_var _var_type;

      static gearsDataWriter_ptr _duplicate (gearsDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static gearsDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static gearsDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static gearsDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      gearsDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const gears& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const gears& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const gears& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const gears& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const gears& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const gears& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const gears& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const gears& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const gears& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const gears& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (gears& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const gears& instance_data) = 0;

   protected:
      gearsDataWriter () {};
      ~gearsDataWriter () {};
   private:
      gearsDataWriter (const gearsDataWriter &);
      gearsDataWriter & operator = (const gearsDataWriter &);
   };

   class gearsDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef gearsDataReader_ptr _ptr_type;
      typedef gearsDataReader_var _var_type;

      static gearsDataReader_ptr _duplicate (gearsDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static gearsDataReader_ptr _narrow (DDS::Object_ptr obj);
      static gearsDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static gearsDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      gearsDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (gears& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (gears& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (gears& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const gears& instance) = 0;

   protected:
      gearsDataReader () {};
      ~gearsDataReader () {};
   private:
      gearsDataReader (const gearsDataReader &);
      gearsDataReader & operator = (const gearsDataReader &);
   };

   class gearsDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef gearsDataReaderView_ptr _ptr_type;
      typedef gearsDataReaderView_var _var_type;

      static gearsDataReaderView_ptr _duplicate (gearsDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static gearsDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static gearsDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static gearsDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      gearsDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (gears& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (gears& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (gearsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (gears& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const gears& instance) = 0;

   protected:
      gearsDataReaderView () {};
      ~gearsDataReaderView () {};
   private:
      gearsDataReaderView (const gearsDataReaderView &);
      gearsDataReaderView & operator = (const gearsDataReaderView &);
   };

   struct inertiaSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < inertia, struct inertiaSeq_uniq_> inertiaSeq;
   typedef DDS_DCPSSequence_var < inertiaSeq> inertiaSeq_var;
   typedef DDS_DCPSSequence_out < inertiaSeq> inertiaSeq_out;
   class inertiaTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef inertiaTypeSupportInterface_ptr _ptr_type;
      typedef inertiaTypeSupportInterface_var _var_type;

      static inertiaTypeSupportInterface_ptr _duplicate (inertiaTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static inertiaTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static inertiaTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static inertiaTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      inertiaTypeSupportInterface_ptr _this () { return this; }


   protected:
      inertiaTypeSupportInterface () {};
      ~inertiaTypeSupportInterface () {};
   private:
      inertiaTypeSupportInterface (const inertiaTypeSupportInterface &);
      inertiaTypeSupportInterface & operator = (const inertiaTypeSupportInterface &);
   };

   class inertiaDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef inertiaDataWriter_ptr _ptr_type;
      typedef inertiaDataWriter_var _var_type;

      static inertiaDataWriter_ptr _duplicate (inertiaDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static inertiaDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static inertiaDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static inertiaDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      inertiaDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const inertia& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const inertia& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const inertia& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const inertia& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const inertia& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const inertia& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const inertia& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const inertia& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const inertia& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const inertia& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (inertia& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const inertia& instance_data) = 0;

   protected:
      inertiaDataWriter () {};
      ~inertiaDataWriter () {};
   private:
      inertiaDataWriter (const inertiaDataWriter &);
      inertiaDataWriter & operator = (const inertiaDataWriter &);
   };

   class inertiaDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef inertiaDataReader_ptr _ptr_type;
      typedef inertiaDataReader_var _var_type;

      static inertiaDataReader_ptr _duplicate (inertiaDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static inertiaDataReader_ptr _narrow (DDS::Object_ptr obj);
      static inertiaDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static inertiaDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      inertiaDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (inertia& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (inertia& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (inertia& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const inertia& instance) = 0;

   protected:
      inertiaDataReader () {};
      ~inertiaDataReader () {};
   private:
      inertiaDataReader (const inertiaDataReader &);
      inertiaDataReader & operator = (const inertiaDataReader &);
   };

   class inertiaDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef inertiaDataReaderView_ptr _ptr_type;
      typedef inertiaDataReaderView_var _var_type;

      static inertiaDataReaderView_ptr _duplicate (inertiaDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static inertiaDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static inertiaDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static inertiaDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      inertiaDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (inertia& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (inertia& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (inertiaSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (inertia& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const inertia& instance) = 0;

   protected:
      inertiaDataReaderView () {};
      ~inertiaDataReaderView () {};
   private:
      inertiaDataReaderView (const inertiaDataReaderView &);
      inertiaDataReaderView & operator = (const inertiaDataReaderView &);
   };

   struct aeroSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < aero, struct aeroSeq_uniq_> aeroSeq;
   typedef DDS_DCPSSequence_var < aeroSeq> aeroSeq_var;
   typedef DDS_DCPSSequence_out < aeroSeq> aeroSeq_out;
   class aeroTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef aeroTypeSupportInterface_ptr _ptr_type;
      typedef aeroTypeSupportInterface_var _var_type;

      static aeroTypeSupportInterface_ptr _duplicate (aeroTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aeroTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static aeroTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aeroTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      aeroTypeSupportInterface_ptr _this () { return this; }


   protected:
      aeroTypeSupportInterface () {};
      ~aeroTypeSupportInterface () {};
   private:
      aeroTypeSupportInterface (const aeroTypeSupportInterface &);
      aeroTypeSupportInterface & operator = (const aeroTypeSupportInterface &);
   };

   class aeroDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef aeroDataWriter_ptr _ptr_type;
      typedef aeroDataWriter_var _var_type;

      static aeroDataWriter_ptr _duplicate (aeroDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aeroDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static aeroDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aeroDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      aeroDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const aero& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const aero& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const aero& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const aero& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const aero& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const aero& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const aero& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const aero& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const aero& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const aero& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (aero& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const aero& instance_data) = 0;

   protected:
      aeroDataWriter () {};
      ~aeroDataWriter () {};
   private:
      aeroDataWriter (const aeroDataWriter &);
      aeroDataWriter & operator = (const aeroDataWriter &);
   };

   class aeroDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef aeroDataReader_ptr _ptr_type;
      typedef aeroDataReader_var _var_type;

      static aeroDataReader_ptr _duplicate (aeroDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aeroDataReader_ptr _narrow (DDS::Object_ptr obj);
      static aeroDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aeroDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      aeroDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (aero& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (aero& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (aero& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const aero& instance) = 0;

   protected:
      aeroDataReader () {};
      ~aeroDataReader () {};
   private:
      aeroDataReader (const aeroDataReader &);
      aeroDataReader & operator = (const aeroDataReader &);
   };

   class aeroDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef aeroDataReaderView_ptr _ptr_type;
      typedef aeroDataReaderView_var _var_type;

      static aeroDataReaderView_ptr _duplicate (aeroDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aeroDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static aeroDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aeroDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      aeroDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (aero& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (aero& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (aeroSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (aero& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const aero& instance) = 0;

   protected:
      aeroDataReaderView () {};
      ~aeroDataReaderView () {};
   private:
      aeroDataReaderView (const aeroDataReaderView &);
      aeroDataReaderView & operator = (const aeroDataReaderView &);
   };

   struct aerocoefficientSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < aerocoefficient, struct aerocoefficientSeq_uniq_> aerocoefficientSeq;
   typedef DDS_DCPSSequence_var < aerocoefficientSeq> aerocoefficientSeq_var;
   typedef DDS_DCPSSequence_out < aerocoefficientSeq> aerocoefficientSeq_out;
   class aerocoefficientTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef aerocoefficientTypeSupportInterface_ptr _ptr_type;
      typedef aerocoefficientTypeSupportInterface_var _var_type;

      static aerocoefficientTypeSupportInterface_ptr _duplicate (aerocoefficientTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aerocoefficientTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static aerocoefficientTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aerocoefficientTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      aerocoefficientTypeSupportInterface_ptr _this () { return this; }


   protected:
      aerocoefficientTypeSupportInterface () {};
      ~aerocoefficientTypeSupportInterface () {};
   private:
      aerocoefficientTypeSupportInterface (const aerocoefficientTypeSupportInterface &);
      aerocoefficientTypeSupportInterface & operator = (const aerocoefficientTypeSupportInterface &);
   };

   class aerocoefficientDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef aerocoefficientDataWriter_ptr _ptr_type;
      typedef aerocoefficientDataWriter_var _var_type;

      static aerocoefficientDataWriter_ptr _duplicate (aerocoefficientDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aerocoefficientDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static aerocoefficientDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aerocoefficientDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      aerocoefficientDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const aerocoefficient& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const aerocoefficient& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const aerocoefficient& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const aerocoefficient& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const aerocoefficient& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const aerocoefficient& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const aerocoefficient& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const aerocoefficient& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const aerocoefficient& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const aerocoefficient& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (aerocoefficient& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const aerocoefficient& instance_data) = 0;

   protected:
      aerocoefficientDataWriter () {};
      ~aerocoefficientDataWriter () {};
   private:
      aerocoefficientDataWriter (const aerocoefficientDataWriter &);
      aerocoefficientDataWriter & operator = (const aerocoefficientDataWriter &);
   };

   class aerocoefficientDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef aerocoefficientDataReader_ptr _ptr_type;
      typedef aerocoefficientDataReader_var _var_type;

      static aerocoefficientDataReader_ptr _duplicate (aerocoefficientDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aerocoefficientDataReader_ptr _narrow (DDS::Object_ptr obj);
      static aerocoefficientDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aerocoefficientDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      aerocoefficientDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (aerocoefficient& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (aerocoefficient& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (aerocoefficient& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const aerocoefficient& instance) = 0;

   protected:
      aerocoefficientDataReader () {};
      ~aerocoefficientDataReader () {};
   private:
      aerocoefficientDataReader (const aerocoefficientDataReader &);
      aerocoefficientDataReader & operator = (const aerocoefficientDataReader &);
   };

   class aerocoefficientDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef aerocoefficientDataReaderView_ptr _ptr_type;
      typedef aerocoefficientDataReaderView_var _var_type;

      static aerocoefficientDataReaderView_ptr _duplicate (aerocoefficientDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static aerocoefficientDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static aerocoefficientDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static aerocoefficientDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      aerocoefficientDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (aerocoefficient& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (aerocoefficient& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (aerocoefficientSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (aerocoefficient& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const aerocoefficient& instance) = 0;

   protected:
      aerocoefficientDataReaderView () {};
      ~aerocoefficientDataReaderView () {};
   private:
      aerocoefficientDataReaderView (const aerocoefficientDataReaderView &);
      aerocoefficientDataReaderView & operator = (const aerocoefficientDataReaderView &);
   };

   struct geometricSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < geometric, struct geometricSeq_uniq_> geometricSeq;
   typedef DDS_DCPSSequence_var < geometricSeq> geometricSeq_var;
   typedef DDS_DCPSSequence_out < geometricSeq> geometricSeq_out;
   class geometricTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef geometricTypeSupportInterface_ptr _ptr_type;
      typedef geometricTypeSupportInterface_var _var_type;

      static geometricTypeSupportInterface_ptr _duplicate (geometricTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static geometricTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static geometricTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static geometricTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      geometricTypeSupportInterface_ptr _this () { return this; }


   protected:
      geometricTypeSupportInterface () {};
      ~geometricTypeSupportInterface () {};
   private:
      geometricTypeSupportInterface (const geometricTypeSupportInterface &);
      geometricTypeSupportInterface & operator = (const geometricTypeSupportInterface &);
   };

   class geometricDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef geometricDataWriter_ptr _ptr_type;
      typedef geometricDataWriter_var _var_type;

      static geometricDataWriter_ptr _duplicate (geometricDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static geometricDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static geometricDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static geometricDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      geometricDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const geometric& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const geometric& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const geometric& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const geometric& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const geometric& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const geometric& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const geometric& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const geometric& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const geometric& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const geometric& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (geometric& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const geometric& instance_data) = 0;

   protected:
      geometricDataWriter () {};
      ~geometricDataWriter () {};
   private:
      geometricDataWriter (const geometricDataWriter &);
      geometricDataWriter & operator = (const geometricDataWriter &);
   };

   class geometricDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef geometricDataReader_ptr _ptr_type;
      typedef geometricDataReader_var _var_type;

      static geometricDataReader_ptr _duplicate (geometricDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static geometricDataReader_ptr _narrow (DDS::Object_ptr obj);
      static geometricDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static geometricDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      geometricDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (geometric& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (geometric& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (geometric& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const geometric& instance) = 0;

   protected:
      geometricDataReader () {};
      ~geometricDataReader () {};
   private:
      geometricDataReader (const geometricDataReader &);
      geometricDataReader & operator = (const geometricDataReader &);
   };

   class geometricDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef geometricDataReaderView_ptr _ptr_type;
      typedef geometricDataReaderView_var _var_type;

      static geometricDataReaderView_ptr _duplicate (geometricDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static geometricDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static geometricDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static geometricDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      geometricDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (geometric& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (geometric& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (geometricSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (geometric& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const geometric& instance) = 0;

   protected:
      geometricDataReaderView () {};
      ~geometricDataReaderView () {};
   private:
      geometricDataReaderView (const geometricDataReaderView &);
      geometricDataReaderView & operator = (const geometricDataReaderView &);
   };

   struct propulsionSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < propulsion, struct propulsionSeq_uniq_> propulsionSeq;
   typedef DDS_DCPSSequence_var < propulsionSeq> propulsionSeq_var;
   typedef DDS_DCPSSequence_out < propulsionSeq> propulsionSeq_out;
   class propulsionTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef propulsionTypeSupportInterface_ptr _ptr_type;
      typedef propulsionTypeSupportInterface_var _var_type;

      static propulsionTypeSupportInterface_ptr _duplicate (propulsionTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static propulsionTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static propulsionTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static propulsionTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      propulsionTypeSupportInterface_ptr _this () { return this; }


   protected:
      propulsionTypeSupportInterface () {};
      ~propulsionTypeSupportInterface () {};
   private:
      propulsionTypeSupportInterface (const propulsionTypeSupportInterface &);
      propulsionTypeSupportInterface & operator = (const propulsionTypeSupportInterface &);
   };

   class propulsionDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef propulsionDataWriter_ptr _ptr_type;
      typedef propulsionDataWriter_var _var_type;

      static propulsionDataWriter_ptr _duplicate (propulsionDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static propulsionDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static propulsionDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static propulsionDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      propulsionDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const propulsion& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const propulsion& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const propulsion& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const propulsion& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const propulsion& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const propulsion& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const propulsion& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const propulsion& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const propulsion& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const propulsion& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (propulsion& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const propulsion& instance_data) = 0;

   protected:
      propulsionDataWriter () {};
      ~propulsionDataWriter () {};
   private:
      propulsionDataWriter (const propulsionDataWriter &);
      propulsionDataWriter & operator = (const propulsionDataWriter &);
   };

   class propulsionDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef propulsionDataReader_ptr _ptr_type;
      typedef propulsionDataReader_var _var_type;

      static propulsionDataReader_ptr _duplicate (propulsionDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static propulsionDataReader_ptr _narrow (DDS::Object_ptr obj);
      static propulsionDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static propulsionDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      propulsionDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (propulsion& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (propulsion& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (propulsion& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const propulsion& instance) = 0;

   protected:
      propulsionDataReader () {};
      ~propulsionDataReader () {};
   private:
      propulsionDataReader (const propulsionDataReader &);
      propulsionDataReader & operator = (const propulsionDataReader &);
   };

   class propulsionDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef propulsionDataReaderView_ptr _ptr_type;
      typedef propulsionDataReaderView_var _var_type;

      static propulsionDataReaderView_ptr _duplicate (propulsionDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static propulsionDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static propulsionDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static propulsionDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      propulsionDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (propulsion& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (propulsion& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (propulsionSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (propulsion& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const propulsion& instance) = 0;

   protected:
      propulsionDataReaderView () {};
      ~propulsionDataReaderView () {};
   private:
      propulsionDataReaderView (const propulsionDataReaderView &);
      propulsionDataReaderView & operator = (const propulsionDataReaderView &);
   };

   struct initialConditionsSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < initialConditions, struct initialConditionsSeq_uniq_> initialConditionsSeq;
   typedef DDS_DCPSSequence_var < initialConditionsSeq> initialConditionsSeq_var;
   typedef DDS_DCPSSequence_out < initialConditionsSeq> initialConditionsSeq_out;
   class initialConditionsTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef initialConditionsTypeSupportInterface_ptr _ptr_type;
      typedef initialConditionsTypeSupportInterface_var _var_type;

      static initialConditionsTypeSupportInterface_ptr _duplicate (initialConditionsTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static initialConditionsTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static initialConditionsTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static initialConditionsTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      initialConditionsTypeSupportInterface_ptr _this () { return this; }


   protected:
      initialConditionsTypeSupportInterface () {};
      ~initialConditionsTypeSupportInterface () {};
   private:
      initialConditionsTypeSupportInterface (const initialConditionsTypeSupportInterface &);
      initialConditionsTypeSupportInterface & operator = (const initialConditionsTypeSupportInterface &);
   };

   class initialConditionsDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef initialConditionsDataWriter_ptr _ptr_type;
      typedef initialConditionsDataWriter_var _var_type;

      static initialConditionsDataWriter_ptr _duplicate (initialConditionsDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static initialConditionsDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static initialConditionsDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static initialConditionsDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      initialConditionsDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const initialConditions& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const initialConditions& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const initialConditions& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const initialConditions& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const initialConditions& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const initialConditions& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const initialConditions& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const initialConditions& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const initialConditions& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const initialConditions& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (initialConditions& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const initialConditions& instance_data) = 0;

   protected:
      initialConditionsDataWriter () {};
      ~initialConditionsDataWriter () {};
   private:
      initialConditionsDataWriter (const initialConditionsDataWriter &);
      initialConditionsDataWriter & operator = (const initialConditionsDataWriter &);
   };

   class initialConditionsDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef initialConditionsDataReader_ptr _ptr_type;
      typedef initialConditionsDataReader_var _var_type;

      static initialConditionsDataReader_ptr _duplicate (initialConditionsDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static initialConditionsDataReader_ptr _narrow (DDS::Object_ptr obj);
      static initialConditionsDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static initialConditionsDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      initialConditionsDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (initialConditions& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (initialConditions& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (initialConditions& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const initialConditions& instance) = 0;

   protected:
      initialConditionsDataReader () {};
      ~initialConditionsDataReader () {};
   private:
      initialConditionsDataReader (const initialConditionsDataReader &);
      initialConditionsDataReader & operator = (const initialConditionsDataReader &);
   };

   class initialConditionsDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef initialConditionsDataReaderView_ptr _ptr_type;
      typedef initialConditionsDataReaderView_var _var_type;

      static initialConditionsDataReaderView_ptr _duplicate (initialConditionsDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static initialConditionsDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static initialConditionsDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static initialConditionsDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      initialConditionsDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (initialConditions& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (initialConditions& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (initialConditionsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (initialConditions& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const initialConditions& instance) = 0;

   protected:
      initialConditionsDataReaderView () {};
      ~initialConditionsDataReaderView () {};
   private:
      initialConditionsDataReaderView (const initialConditionsDataReaderView &);
      initialConditionsDataReaderView & operator = (const initialConditionsDataReaderView &);
   };

   struct subSystemsSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < subSystems, struct subSystemsSeq_uniq_> subSystemsSeq;
   typedef DDS_DCPSSequence_var < subSystemsSeq> subSystemsSeq_var;
   typedef DDS_DCPSSequence_out < subSystemsSeq> subSystemsSeq_out;
   class subSystemsTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef subSystemsTypeSupportInterface_ptr _ptr_type;
      typedef subSystemsTypeSupportInterface_var _var_type;

      static subSystemsTypeSupportInterface_ptr _duplicate (subSystemsTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static subSystemsTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static subSystemsTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static subSystemsTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      subSystemsTypeSupportInterface_ptr _this () { return this; }


   protected:
      subSystemsTypeSupportInterface () {};
      ~subSystemsTypeSupportInterface () {};
   private:
      subSystemsTypeSupportInterface (const subSystemsTypeSupportInterface &);
      subSystemsTypeSupportInterface & operator = (const subSystemsTypeSupportInterface &);
   };

   class subSystemsDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef subSystemsDataWriter_ptr _ptr_type;
      typedef subSystemsDataWriter_var _var_type;

      static subSystemsDataWriter_ptr _duplicate (subSystemsDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static subSystemsDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static subSystemsDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static subSystemsDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      subSystemsDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const subSystems& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const subSystems& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const subSystems& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const subSystems& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const subSystems& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const subSystems& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const subSystems& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const subSystems& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const subSystems& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const subSystems& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (subSystems& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const subSystems& instance_data) = 0;

   protected:
      subSystemsDataWriter () {};
      ~subSystemsDataWriter () {};
   private:
      subSystemsDataWriter (const subSystemsDataWriter &);
      subSystemsDataWriter & operator = (const subSystemsDataWriter &);
   };

   class subSystemsDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef subSystemsDataReader_ptr _ptr_type;
      typedef subSystemsDataReader_var _var_type;

      static subSystemsDataReader_ptr _duplicate (subSystemsDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static subSystemsDataReader_ptr _narrow (DDS::Object_ptr obj);
      static subSystemsDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static subSystemsDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      subSystemsDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (subSystems& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (subSystems& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (subSystems& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const subSystems& instance) = 0;

   protected:
      subSystemsDataReader () {};
      ~subSystemsDataReader () {};
   private:
      subSystemsDataReader (const subSystemsDataReader &);
      subSystemsDataReader & operator = (const subSystemsDataReader &);
   };

   class subSystemsDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef subSystemsDataReaderView_ptr _ptr_type;
      typedef subSystemsDataReaderView_var _var_type;

      static subSystemsDataReaderView_ptr _duplicate (subSystemsDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static subSystemsDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static subSystemsDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static subSystemsDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      subSystemsDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (subSystems& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (subSystems& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (subSystemsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (subSystems& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const subSystems& instance) = 0;

   protected:
      subSystemsDataReaderView () {};
      ~subSystemsDataReaderView () {};
   private:
      subSystemsDataReaderView (const subSystemsDataReaderView &);
      subSystemsDataReaderView & operator = (const subSystemsDataReaderView &);
   };

   struct subSystemOutSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < subSystemOut, struct subSystemOutSeq_uniq_> subSystemOutSeq;
   typedef DDS_DCPSSequence_var < subSystemOutSeq> subSystemOutSeq_var;
   typedef DDS_DCPSSequence_out < subSystemOutSeq> subSystemOutSeq_out;
   class subSystemOutTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef subSystemOutTypeSupportInterface_ptr _ptr_type;
      typedef subSystemOutTypeSupportInterface_var _var_type;

      static subSystemOutTypeSupportInterface_ptr _duplicate (subSystemOutTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static subSystemOutTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static subSystemOutTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static subSystemOutTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      subSystemOutTypeSupportInterface_ptr _this () { return this; }


   protected:
      subSystemOutTypeSupportInterface () {};
      ~subSystemOutTypeSupportInterface () {};
   private:
      subSystemOutTypeSupportInterface (const subSystemOutTypeSupportInterface &);
      subSystemOutTypeSupportInterface & operator = (const subSystemOutTypeSupportInterface &);
   };

   class subSystemOutDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef subSystemOutDataWriter_ptr _ptr_type;
      typedef subSystemOutDataWriter_var _var_type;

      static subSystemOutDataWriter_ptr _duplicate (subSystemOutDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static subSystemOutDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static subSystemOutDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static subSystemOutDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      subSystemOutDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const subSystemOut& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const subSystemOut& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const subSystemOut& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const subSystemOut& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const subSystemOut& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const subSystemOut& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const subSystemOut& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const subSystemOut& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const subSystemOut& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const subSystemOut& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (subSystemOut& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const subSystemOut& instance_data) = 0;

   protected:
      subSystemOutDataWriter () {};
      ~subSystemOutDataWriter () {};
   private:
      subSystemOutDataWriter (const subSystemOutDataWriter &);
      subSystemOutDataWriter & operator = (const subSystemOutDataWriter &);
   };

   class subSystemOutDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef subSystemOutDataReader_ptr _ptr_type;
      typedef subSystemOutDataReader_var _var_type;

      static subSystemOutDataReader_ptr _duplicate (subSystemOutDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static subSystemOutDataReader_ptr _narrow (DDS::Object_ptr obj);
      static subSystemOutDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static subSystemOutDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      subSystemOutDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (subSystemOut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (subSystemOut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (subSystemOut& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const subSystemOut& instance) = 0;

   protected:
      subSystemOutDataReader () {};
      ~subSystemOutDataReader () {};
   private:
      subSystemOutDataReader (const subSystemOutDataReader &);
      subSystemOutDataReader & operator = (const subSystemOutDataReader &);
   };

   class subSystemOutDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef subSystemOutDataReaderView_ptr _ptr_type;
      typedef subSystemOutDataReaderView_var _var_type;

      static subSystemOutDataReaderView_ptr _duplicate (subSystemOutDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static subSystemOutDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static subSystemOutDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static subSystemOutDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      subSystemOutDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (subSystemOut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (subSystemOut& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (subSystemOutSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (subSystemOut& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const subSystemOut& instance) = 0;

   protected:
      subSystemOutDataReaderView () {};
      ~subSystemOutDataReaderView () {};
   private:
      subSystemOutDataReaderView (const subSystemOutDataReaderView &);
      subSystemOutDataReaderView & operator = (const subSystemOutDataReaderView &);
   };

}
template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);
template <>
JSBSim::gears::_slip_angle_deg_array_slice* DDS_DCPS_ArrayHelper < JSBSim::gears::_slip_angle_deg_array, JSBSim::gears::_slip_angle_deg_array_slice, JSBSim::gears::_slip_angle_deg_array_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_slip_angle_deg_array, JSBSim::gears::_slip_angle_deg_array_slice, JSBSim::gears::_slip_angle_deg_array_uniq_>::copy (JSBSim::gears::_slip_angle_deg_array_slice *to, const JSBSim::gears::_slip_angle_deg_array_slice* from);
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_slip_angle_deg_array, JSBSim::gears::_slip_angle_deg_array_slice, JSBSim::gears::_slip_angle_deg_array_uniq_>::free (JSBSim::gears::_slip_angle_deg_array_slice *ptr);
template <>
JSBSim::gears::_WOW_array_slice* DDS_DCPS_ArrayHelper < JSBSim::gears::_WOW_array, JSBSim::gears::_WOW_array_slice, JSBSim::gears::_WOW_array_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_WOW_array, JSBSim::gears::_WOW_array_slice, JSBSim::gears::_WOW_array_uniq_>::copy (JSBSim::gears::_WOW_array_slice *to, const JSBSim::gears::_WOW_array_slice* from);
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_WOW_array, JSBSim::gears::_WOW_array_slice, JSBSim::gears::_WOW_array_uniq_>::free (JSBSim::gears::_WOW_array_slice *ptr);
template <>
JSBSim::gears::_wheel_speed_fps_array_slice* DDS_DCPS_ArrayHelper < JSBSim::gears::_wheel_speed_fps_array, JSBSim::gears::_wheel_speed_fps_array_slice, JSBSim::gears::_wheel_speed_fps_array_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_wheel_speed_fps_array, JSBSim::gears::_wheel_speed_fps_array_slice, JSBSim::gears::_wheel_speed_fps_array_uniq_>::copy (JSBSim::gears::_wheel_speed_fps_array_slice *to, const JSBSim::gears::_wheel_speed_fps_array_slice* from);
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_wheel_speed_fps_array, JSBSim::gears::_wheel_speed_fps_array_slice, JSBSim::gears::_wheel_speed_fps_array_uniq_>::free (JSBSim::gears::_wheel_speed_fps_array_slice *ptr);
template <>
JSBSim::gears::_z_position_array_slice* DDS_DCPS_ArrayHelper < JSBSim::gears::_z_position_array, JSBSim::gears::_z_position_array_slice, JSBSim::gears::_z_position_array_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_z_position_array, JSBSim::gears::_z_position_array_slice, JSBSim::gears::_z_position_array_uniq_>::copy (JSBSim::gears::_z_position_array_slice *to, const JSBSim::gears::_z_position_array_slice* from);
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_z_position_array, JSBSim::gears::_z_position_array_slice, JSBSim::gears::_z_position_array_uniq_>::free (JSBSim::gears::_z_position_array_slice *ptr);
template <>
JSBSim::gears::_compression_ft_array_slice* DDS_DCPS_ArrayHelper < JSBSim::gears::_compression_ft_array, JSBSim::gears::_compression_ft_array_slice, JSBSim::gears::_compression_ft_array_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_compression_ft_array, JSBSim::gears::_compression_ft_array_slice, JSBSim::gears::_compression_ft_array_uniq_>::copy (JSBSim::gears::_compression_ft_array_slice *to, const JSBSim::gears::_compression_ft_array_slice* from);
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_compression_ft_array, JSBSim::gears::_compression_ft_array_slice, JSBSim::gears::_compression_ft_array_uniq_>::free (JSBSim::gears::_compression_ft_array_slice *ptr);
template <>
JSBSim::gears::_side_friction_coeff_array_slice* DDS_DCPS_ArrayHelper < JSBSim::gears::_side_friction_coeff_array, JSBSim::gears::_side_friction_coeff_array_slice, JSBSim::gears::_side_friction_coeff_array_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_side_friction_coeff_array, JSBSim::gears::_side_friction_coeff_array_slice, JSBSim::gears::_side_friction_coeff_array_uniq_>::copy (JSBSim::gears::_side_friction_coeff_array_slice *to, const JSBSim::gears::_side_friction_coeff_array_slice* from);
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_side_friction_coeff_array, JSBSim::gears::_side_friction_coeff_array_slice, JSBSim::gears::_side_friction_coeff_array_uniq_>::free (JSBSim::gears::_side_friction_coeff_array_slice *ptr);
template <>
JSBSim::gears::_pos_norm_array_slice* DDS_DCPS_ArrayHelper < JSBSim::gears::_pos_norm_array, JSBSim::gears::_pos_norm_array_slice, JSBSim::gears::_pos_norm_array_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_pos_norm_array, JSBSim::gears::_pos_norm_array_slice, JSBSim::gears::_pos_norm_array_uniq_>::copy (JSBSim::gears::_pos_norm_array_slice *to, const JSBSim::gears::_pos_norm_array_slice* from);
template <>
void DDS_DCPS_ArrayHelper < JSBSim::gears::_pos_norm_array, JSBSim::gears::_pos_norm_array_slice, JSBSim::gears::_pos_norm_array_uniq_>::free (JSBSim::gears::_pos_norm_array_slice *ptr);
template <>
JSBSim::propulsion::_tank_contents_lbs_array_slice* DDS_DCPS_ArrayHelper < JSBSim::propulsion::_tank_contents_lbs_array, JSBSim::propulsion::_tank_contents_lbs_array_slice, JSBSim::propulsion::_tank_contents_lbs_array_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < JSBSim::propulsion::_tank_contents_lbs_array, JSBSim::propulsion::_tank_contents_lbs_array_slice, JSBSim::propulsion::_tank_contents_lbs_array_uniq_>::copy (JSBSim::propulsion::_tank_contents_lbs_array_slice *to, const JSBSim::propulsion::_tank_contents_lbs_array_slice* from);
template <>
void DDS_DCPS_ArrayHelper < JSBSim::propulsion::_tank_contents_lbs_array, JSBSim::propulsion::_tank_contents_lbs_array_slice, JSBSim::propulsion::_tank_contents_lbs_array_uniq_>::free (JSBSim::propulsion::_tank_contents_lbs_array_slice *ptr);




#endif 
