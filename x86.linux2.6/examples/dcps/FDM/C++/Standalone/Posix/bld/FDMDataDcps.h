//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: FDMDataDcps.h
//  Source: bld/FDMDataDcps.idl
//  Generated: Wed Oct 24 10:05:08 2012
//  OpenSplice V5.5.1OSS
//  
//******************************************************************
#ifndef _FDMDATADCPS_H_
#define _FDMDATADCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps_builtintopics.h"
#include "FDMData.h"
#include "dds_builtinTopics.h"
#include "dds_dcps_interfaces.h"

namespace FDMData
{
   struct Msg;

   class MsgTypeSupportInterface;

   typedef MsgTypeSupportInterface * MsgTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < MsgTypeSupportInterface> MsgTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < MsgTypeSupportInterface> MsgTypeSupportInterface_out;


   class MsgDataWriter;

   typedef MsgDataWriter * MsgDataWriter_ptr;
   typedef DDS_DCPSInterface_var < MsgDataWriter> MsgDataWriter_var;
   typedef DDS_DCPSInterface_out < MsgDataWriter> MsgDataWriter_out;


   class MsgDataReader;

   typedef MsgDataReader * MsgDataReader_ptr;
   typedef DDS_DCPSInterface_var < MsgDataReader> MsgDataReader_var;
   typedef DDS_DCPSInterface_out < MsgDataReader> MsgDataReader_out;


   class MsgDataReaderView;

   typedef MsgDataReaderView * MsgDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < MsgDataReaderView> MsgDataReaderView_var;
   typedef DDS_DCPSInterface_out < MsgDataReaderView> MsgDataReaderView_out;

   struct MsgSeq_uniq_ {};
   typedef DDS_DCPSUFLSeq < Msg, struct MsgSeq_uniq_> MsgSeq;
   typedef DDS_DCPSSequence_var < MsgSeq> MsgSeq_var;
   typedef DDS_DCPSSequence_out < MsgSeq> MsgSeq_out;
   class MsgTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef MsgTypeSupportInterface_ptr _ptr_type;
      typedef MsgTypeSupportInterface_var _var_type;

      static MsgTypeSupportInterface_ptr _duplicate (MsgTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MsgTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static MsgTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MsgTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      MsgTypeSupportInterface_ptr _this () { return this; }


   protected:
      MsgTypeSupportInterface () {};
      ~MsgTypeSupportInterface () {};
   private:
      MsgTypeSupportInterface (const MsgTypeSupportInterface &);
      MsgTypeSupportInterface & operator = (const MsgTypeSupportInterface &);
   };

   class MsgDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef MsgDataWriter_ptr _ptr_type;
      typedef MsgDataWriter_var _var_type;

      static MsgDataWriter_ptr _duplicate (MsgDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MsgDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static MsgDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MsgDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      MsgDataWriter_ptr _this () { return this; }

      virtual DDS::InstanceHandle_t register_instance (const Msg& instance_data) = 0;
      virtual DDS::InstanceHandle_t register_instance_w_timestamp (const Msg& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t unregister_instance (const Msg& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const Msg& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t write (const Msg& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t write_w_timestamp (const Msg& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t dispose (const Msg& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t dispose_w_timestamp (const Msg& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t writedispose (const Msg& instance_data, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::ReturnCode_t writedispose_w_timestamp (const Msg& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::ReturnCode_t get_key_value (Msg& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const Msg& instance_data) = 0;

   protected:
      MsgDataWriter () {};
      ~MsgDataWriter () {};
   private:
      MsgDataWriter (const MsgDataWriter &);
      MsgDataWriter & operator = (const MsgDataWriter &);
   };

   class MsgDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef MsgDataReader_ptr _ptr_type;
      typedef MsgDataReader_var _var_type;

      static MsgDataReader_ptr _duplicate (MsgDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MsgDataReader_ptr _narrow (DDS::Object_ptr obj);
      static MsgDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MsgDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      MsgDataReader_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (Msg& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (Msg& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (Msg& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const Msg& instance) = 0;

   protected:
      MsgDataReader () {};
      ~MsgDataReader () {};
   private:
      MsgDataReader (const MsgDataReader &);
      MsgDataReader & operator = (const MsgDataReader &);
   };

   class MsgDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef MsgDataReaderView_ptr _ptr_type;
      typedef MsgDataReaderView_var _var_type;

      static MsgDataReaderView_ptr _duplicate (MsgDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MsgDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static MsgDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MsgDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      MsgDataReaderView_ptr _this () { return this; }

      virtual DDS::ReturnCode_t read (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t read_next_sample (Msg& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t take_next_sample (Msg& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::ReturnCode_t read_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t take_next_instance (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
      virtual DDS::ReturnCode_t read_next_instance_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t take_next_instance_w_condition (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::ReturnCode_t return_loan (MsgSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::ReturnCode_t get_key_value (Msg& key_holder, DDS::InstanceHandle_t handle) = 0;
      virtual DDS::InstanceHandle_t lookup_instance (const Msg& instance) = 0;

   protected:
      MsgDataReaderView () {};
      ~MsgDataReaderView () {};
   private:
      MsgDataReaderView (const MsgDataReaderView &);
      MsgDataReaderView & operator = (const MsgDataReaderView &);
   };

}
template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
