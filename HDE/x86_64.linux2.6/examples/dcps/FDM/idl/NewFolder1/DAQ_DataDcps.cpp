//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: DAQ_DataDcps.cpp
//  Source: NewFolder1/DAQ_DataDcps.idl
//  Generated: Tue Dec 11 10:08:45 2012
//  OpenSplice V5.5.1OSS
//  
//******************************************************************

#include "DAQ_DataDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < DAQ_Data::DaqData, struct DaqDataSeq_uniq_>;
#endif

const char * DAQ_Data::DaqDataTypeSupportInterface::_local_id = "IDL:DAQ_Data/DaqDataTypeSupportInterface:1.0";

DAQ_Data::DaqDataTypeSupportInterface_ptr DAQ_Data::DaqDataTypeSupportInterface::_duplicate (DAQ_Data::DaqDataTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DAQ_Data::DaqDataTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, DAQ_Data::DaqDataTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DAQ_Data::DaqDataTypeSupportInterface_ptr DAQ_Data::DaqDataTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   DAQ_Data::DaqDataTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (DAQ_Data::DaqDataTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < DAQ_Data::DaqDataTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

DAQ_Data::DaqDataTypeSupportInterface_ptr DAQ_Data::DaqDataTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   DAQ_Data::DaqDataTypeSupportInterface_ptr result;
   result = dynamic_cast < DAQ_Data::DaqDataTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * DAQ_Data::DaqDataDataWriter::_local_id = "IDL:DAQ_Data/DaqDataDataWriter:1.0";

DAQ_Data::DaqDataDataWriter_ptr DAQ_Data::DaqDataDataWriter::_duplicate (DAQ_Data::DaqDataDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DAQ_Data::DaqDataDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, DAQ_Data::DaqDataDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DAQ_Data::DaqDataDataWriter_ptr DAQ_Data::DaqDataDataWriter::_narrow (DDS::Object_ptr p)
{
   DAQ_Data::DaqDataDataWriter_ptr result = NULL;
   if (p && p->_is_a (DAQ_Data::DaqDataDataWriter::_local_id))
   {
      result = dynamic_cast < DAQ_Data::DaqDataDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

DAQ_Data::DaqDataDataWriter_ptr DAQ_Data::DaqDataDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   DAQ_Data::DaqDataDataWriter_ptr result;
   result = dynamic_cast < DAQ_Data::DaqDataDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * DAQ_Data::DaqDataDataReader::_local_id = "IDL:DAQ_Data/DaqDataDataReader:1.0";

DAQ_Data::DaqDataDataReader_ptr DAQ_Data::DaqDataDataReader::_duplicate (DAQ_Data::DaqDataDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DAQ_Data::DaqDataDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, DAQ_Data::DaqDataDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DAQ_Data::DaqDataDataReader_ptr DAQ_Data::DaqDataDataReader::_narrow (DDS::Object_ptr p)
{
   DAQ_Data::DaqDataDataReader_ptr result = NULL;
   if (p && p->_is_a (DAQ_Data::DaqDataDataReader::_local_id))
   {
      result = dynamic_cast < DAQ_Data::DaqDataDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

DAQ_Data::DaqDataDataReader_ptr DAQ_Data::DaqDataDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   DAQ_Data::DaqDataDataReader_ptr result;
   result = dynamic_cast < DAQ_Data::DaqDataDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * DAQ_Data::DaqDataDataReaderView::_local_id = "IDL:DAQ_Data/DaqDataDataReaderView:1.0";

DAQ_Data::DaqDataDataReaderView_ptr DAQ_Data::DaqDataDataReaderView::_duplicate (DAQ_Data::DaqDataDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean DAQ_Data::DaqDataDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, DAQ_Data::DaqDataDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

DAQ_Data::DaqDataDataReaderView_ptr DAQ_Data::DaqDataDataReaderView::_narrow (DDS::Object_ptr p)
{
   DAQ_Data::DaqDataDataReaderView_ptr result = NULL;
   if (p && p->_is_a (DAQ_Data::DaqDataDataReaderView::_local_id))
   {
      result = dynamic_cast < DAQ_Data::DaqDataDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

DAQ_Data::DaqDataDataReaderView_ptr DAQ_Data::DaqDataDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   DAQ_Data::DaqDataDataReaderView_ptr result;
   result = dynamic_cast < DAQ_Data::DaqDataDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}



