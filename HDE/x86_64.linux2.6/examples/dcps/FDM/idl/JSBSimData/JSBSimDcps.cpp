//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: JSBSimDcps.cpp
//  Source: JSBSimData/JSBSimDcps.idl
//  Generated: Mon Nov 26 12:02:28 2012
//  OpenSplice V5.5.1OSS
//  
//******************************************************************

#include "JSBSimDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::subSystemOut, struct subSystemOutSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::subSystems, struct subSystemsSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::initialConditions, struct initialConditionsSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::propulsion, struct propulsionSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::geometric, struct geometricSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::aerocoefficient, struct aerocoefficientSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::aero, struct aeroSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::inertia, struct inertiaSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::gears, struct gearsSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::aerosurfaces, struct aerosurfacesSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::atmosphere, struct atmosphereSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::velocities, struct velocitiesSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::simulation, struct simulationSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::atitude, struct atitudeSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::accelerations, struct accelerationsSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUFLSeq < JSBSim::position, struct positionSeq_uniq_>;
#endif

const char * JSBSim::positionTypeSupportInterface::_local_id = "IDL:JSBSim/positionTypeSupportInterface:1.0";

JSBSim::positionTypeSupportInterface_ptr JSBSim::positionTypeSupportInterface::_duplicate (JSBSim::positionTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::positionTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::positionTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::positionTypeSupportInterface_ptr JSBSim::positionTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::positionTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::positionTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::positionTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::positionTypeSupportInterface_ptr JSBSim::positionTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::positionTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::positionTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::positionDataWriter::_local_id = "IDL:JSBSim/positionDataWriter:1.0";

JSBSim::positionDataWriter_ptr JSBSim::positionDataWriter::_duplicate (JSBSim::positionDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::positionDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::positionDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::positionDataWriter_ptr JSBSim::positionDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::positionDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::positionDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::positionDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::positionDataWriter_ptr JSBSim::positionDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::positionDataWriter_ptr result;
   result = dynamic_cast < JSBSim::positionDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::positionDataReader::_local_id = "IDL:JSBSim/positionDataReader:1.0";

JSBSim::positionDataReader_ptr JSBSim::positionDataReader::_duplicate (JSBSim::positionDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::positionDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::positionDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::positionDataReader_ptr JSBSim::positionDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::positionDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::positionDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::positionDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::positionDataReader_ptr JSBSim::positionDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::positionDataReader_ptr result;
   result = dynamic_cast < JSBSim::positionDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::positionDataReaderView::_local_id = "IDL:JSBSim/positionDataReaderView:1.0";

JSBSim::positionDataReaderView_ptr JSBSim::positionDataReaderView::_duplicate (JSBSim::positionDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::positionDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::positionDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::positionDataReaderView_ptr JSBSim::positionDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::positionDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::positionDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::positionDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::positionDataReaderView_ptr JSBSim::positionDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::positionDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::positionDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::accelerationsTypeSupportInterface::_local_id = "IDL:JSBSim/accelerationsTypeSupportInterface:1.0";

JSBSim::accelerationsTypeSupportInterface_ptr JSBSim::accelerationsTypeSupportInterface::_duplicate (JSBSim::accelerationsTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::accelerationsTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::accelerationsTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::accelerationsTypeSupportInterface_ptr JSBSim::accelerationsTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::accelerationsTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::accelerationsTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::accelerationsTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::accelerationsTypeSupportInterface_ptr JSBSim::accelerationsTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::accelerationsTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::accelerationsTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::accelerationsDataWriter::_local_id = "IDL:JSBSim/accelerationsDataWriter:1.0";

JSBSim::accelerationsDataWriter_ptr JSBSim::accelerationsDataWriter::_duplicate (JSBSim::accelerationsDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::accelerationsDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::accelerationsDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::accelerationsDataWriter_ptr JSBSim::accelerationsDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::accelerationsDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::accelerationsDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::accelerationsDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::accelerationsDataWriter_ptr JSBSim::accelerationsDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::accelerationsDataWriter_ptr result;
   result = dynamic_cast < JSBSim::accelerationsDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::accelerationsDataReader::_local_id = "IDL:JSBSim/accelerationsDataReader:1.0";

JSBSim::accelerationsDataReader_ptr JSBSim::accelerationsDataReader::_duplicate (JSBSim::accelerationsDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::accelerationsDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::accelerationsDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::accelerationsDataReader_ptr JSBSim::accelerationsDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::accelerationsDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::accelerationsDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::accelerationsDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::accelerationsDataReader_ptr JSBSim::accelerationsDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::accelerationsDataReader_ptr result;
   result = dynamic_cast < JSBSim::accelerationsDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::accelerationsDataReaderView::_local_id = "IDL:JSBSim/accelerationsDataReaderView:1.0";

JSBSim::accelerationsDataReaderView_ptr JSBSim::accelerationsDataReaderView::_duplicate (JSBSim::accelerationsDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::accelerationsDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::accelerationsDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::accelerationsDataReaderView_ptr JSBSim::accelerationsDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::accelerationsDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::accelerationsDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::accelerationsDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::accelerationsDataReaderView_ptr JSBSim::accelerationsDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::accelerationsDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::accelerationsDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::atitudeTypeSupportInterface::_local_id = "IDL:JSBSim/atitudeTypeSupportInterface:1.0";

JSBSim::atitudeTypeSupportInterface_ptr JSBSim::atitudeTypeSupportInterface::_duplicate (JSBSim::atitudeTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::atitudeTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::atitudeTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::atitudeTypeSupportInterface_ptr JSBSim::atitudeTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::atitudeTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::atitudeTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::atitudeTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::atitudeTypeSupportInterface_ptr JSBSim::atitudeTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::atitudeTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::atitudeTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::atitudeDataWriter::_local_id = "IDL:JSBSim/atitudeDataWriter:1.0";

JSBSim::atitudeDataWriter_ptr JSBSim::atitudeDataWriter::_duplicate (JSBSim::atitudeDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::atitudeDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::atitudeDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::atitudeDataWriter_ptr JSBSim::atitudeDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::atitudeDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::atitudeDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::atitudeDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::atitudeDataWriter_ptr JSBSim::atitudeDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::atitudeDataWriter_ptr result;
   result = dynamic_cast < JSBSim::atitudeDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::atitudeDataReader::_local_id = "IDL:JSBSim/atitudeDataReader:1.0";

JSBSim::atitudeDataReader_ptr JSBSim::atitudeDataReader::_duplicate (JSBSim::atitudeDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::atitudeDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::atitudeDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::atitudeDataReader_ptr JSBSim::atitudeDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::atitudeDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::atitudeDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::atitudeDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::atitudeDataReader_ptr JSBSim::atitudeDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::atitudeDataReader_ptr result;
   result = dynamic_cast < JSBSim::atitudeDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::atitudeDataReaderView::_local_id = "IDL:JSBSim/atitudeDataReaderView:1.0";

JSBSim::atitudeDataReaderView_ptr JSBSim::atitudeDataReaderView::_duplicate (JSBSim::atitudeDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::atitudeDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::atitudeDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::atitudeDataReaderView_ptr JSBSim::atitudeDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::atitudeDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::atitudeDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::atitudeDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::atitudeDataReaderView_ptr JSBSim::atitudeDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::atitudeDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::atitudeDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::simulationTypeSupportInterface::_local_id = "IDL:JSBSim/simulationTypeSupportInterface:1.0";

JSBSim::simulationTypeSupportInterface_ptr JSBSim::simulationTypeSupportInterface::_duplicate (JSBSim::simulationTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::simulationTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::simulationTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::simulationTypeSupportInterface_ptr JSBSim::simulationTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::simulationTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::simulationTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::simulationTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::simulationTypeSupportInterface_ptr JSBSim::simulationTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::simulationTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::simulationTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::simulationDataWriter::_local_id = "IDL:JSBSim/simulationDataWriter:1.0";

JSBSim::simulationDataWriter_ptr JSBSim::simulationDataWriter::_duplicate (JSBSim::simulationDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::simulationDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::simulationDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::simulationDataWriter_ptr JSBSim::simulationDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::simulationDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::simulationDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::simulationDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::simulationDataWriter_ptr JSBSim::simulationDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::simulationDataWriter_ptr result;
   result = dynamic_cast < JSBSim::simulationDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::simulationDataReader::_local_id = "IDL:JSBSim/simulationDataReader:1.0";

JSBSim::simulationDataReader_ptr JSBSim::simulationDataReader::_duplicate (JSBSim::simulationDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::simulationDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::simulationDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::simulationDataReader_ptr JSBSim::simulationDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::simulationDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::simulationDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::simulationDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::simulationDataReader_ptr JSBSim::simulationDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::simulationDataReader_ptr result;
   result = dynamic_cast < JSBSim::simulationDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::simulationDataReaderView::_local_id = "IDL:JSBSim/simulationDataReaderView:1.0";

JSBSim::simulationDataReaderView_ptr JSBSim::simulationDataReaderView::_duplicate (JSBSim::simulationDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::simulationDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::simulationDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::simulationDataReaderView_ptr JSBSim::simulationDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::simulationDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::simulationDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::simulationDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::simulationDataReaderView_ptr JSBSim::simulationDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::simulationDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::simulationDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::velocitiesTypeSupportInterface::_local_id = "IDL:JSBSim/velocitiesTypeSupportInterface:1.0";

JSBSim::velocitiesTypeSupportInterface_ptr JSBSim::velocitiesTypeSupportInterface::_duplicate (JSBSim::velocitiesTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::velocitiesTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::velocitiesTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::velocitiesTypeSupportInterface_ptr JSBSim::velocitiesTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::velocitiesTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::velocitiesTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::velocitiesTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::velocitiesTypeSupportInterface_ptr JSBSim::velocitiesTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::velocitiesTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::velocitiesTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::velocitiesDataWriter::_local_id = "IDL:JSBSim/velocitiesDataWriter:1.0";

JSBSim::velocitiesDataWriter_ptr JSBSim::velocitiesDataWriter::_duplicate (JSBSim::velocitiesDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::velocitiesDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::velocitiesDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::velocitiesDataWriter_ptr JSBSim::velocitiesDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::velocitiesDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::velocitiesDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::velocitiesDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::velocitiesDataWriter_ptr JSBSim::velocitiesDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::velocitiesDataWriter_ptr result;
   result = dynamic_cast < JSBSim::velocitiesDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::velocitiesDataReader::_local_id = "IDL:JSBSim/velocitiesDataReader:1.0";

JSBSim::velocitiesDataReader_ptr JSBSim::velocitiesDataReader::_duplicate (JSBSim::velocitiesDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::velocitiesDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::velocitiesDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::velocitiesDataReader_ptr JSBSim::velocitiesDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::velocitiesDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::velocitiesDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::velocitiesDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::velocitiesDataReader_ptr JSBSim::velocitiesDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::velocitiesDataReader_ptr result;
   result = dynamic_cast < JSBSim::velocitiesDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::velocitiesDataReaderView::_local_id = "IDL:JSBSim/velocitiesDataReaderView:1.0";

JSBSim::velocitiesDataReaderView_ptr JSBSim::velocitiesDataReaderView::_duplicate (JSBSim::velocitiesDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::velocitiesDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::velocitiesDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::velocitiesDataReaderView_ptr JSBSim::velocitiesDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::velocitiesDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::velocitiesDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::velocitiesDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::velocitiesDataReaderView_ptr JSBSim::velocitiesDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::velocitiesDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::velocitiesDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::atmosphereTypeSupportInterface::_local_id = "IDL:JSBSim/atmosphereTypeSupportInterface:1.0";

JSBSim::atmosphereTypeSupportInterface_ptr JSBSim::atmosphereTypeSupportInterface::_duplicate (JSBSim::atmosphereTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::atmosphereTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::atmosphereTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::atmosphereTypeSupportInterface_ptr JSBSim::atmosphereTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::atmosphereTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::atmosphereTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::atmosphereTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::atmosphereTypeSupportInterface_ptr JSBSim::atmosphereTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::atmosphereTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::atmosphereTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::atmosphereDataWriter::_local_id = "IDL:JSBSim/atmosphereDataWriter:1.0";

JSBSim::atmosphereDataWriter_ptr JSBSim::atmosphereDataWriter::_duplicate (JSBSim::atmosphereDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::atmosphereDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::atmosphereDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::atmosphereDataWriter_ptr JSBSim::atmosphereDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::atmosphereDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::atmosphereDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::atmosphereDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::atmosphereDataWriter_ptr JSBSim::atmosphereDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::atmosphereDataWriter_ptr result;
   result = dynamic_cast < JSBSim::atmosphereDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::atmosphereDataReader::_local_id = "IDL:JSBSim/atmosphereDataReader:1.0";

JSBSim::atmosphereDataReader_ptr JSBSim::atmosphereDataReader::_duplicate (JSBSim::atmosphereDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::atmosphereDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::atmosphereDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::atmosphereDataReader_ptr JSBSim::atmosphereDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::atmosphereDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::atmosphereDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::atmosphereDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::atmosphereDataReader_ptr JSBSim::atmosphereDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::atmosphereDataReader_ptr result;
   result = dynamic_cast < JSBSim::atmosphereDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::atmosphereDataReaderView::_local_id = "IDL:JSBSim/atmosphereDataReaderView:1.0";

JSBSim::atmosphereDataReaderView_ptr JSBSim::atmosphereDataReaderView::_duplicate (JSBSim::atmosphereDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::atmosphereDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::atmosphereDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::atmosphereDataReaderView_ptr JSBSim::atmosphereDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::atmosphereDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::atmosphereDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::atmosphereDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::atmosphereDataReaderView_ptr JSBSim::atmosphereDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::atmosphereDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::atmosphereDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aerosurfacesTypeSupportInterface::_local_id = "IDL:JSBSim/aerosurfacesTypeSupportInterface:1.0";

JSBSim::aerosurfacesTypeSupportInterface_ptr JSBSim::aerosurfacesTypeSupportInterface::_duplicate (JSBSim::aerosurfacesTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aerosurfacesTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aerosurfacesTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aerosurfacesTypeSupportInterface_ptr JSBSim::aerosurfacesTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::aerosurfacesTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aerosurfacesTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::aerosurfacesTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aerosurfacesTypeSupportInterface_ptr JSBSim::aerosurfacesTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aerosurfacesTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::aerosurfacesTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aerosurfacesDataWriter::_local_id = "IDL:JSBSim/aerosurfacesDataWriter:1.0";

JSBSim::aerosurfacesDataWriter_ptr JSBSim::aerosurfacesDataWriter::_duplicate (JSBSim::aerosurfacesDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aerosurfacesDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aerosurfacesDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aerosurfacesDataWriter_ptr JSBSim::aerosurfacesDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::aerosurfacesDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aerosurfacesDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::aerosurfacesDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aerosurfacesDataWriter_ptr JSBSim::aerosurfacesDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aerosurfacesDataWriter_ptr result;
   result = dynamic_cast < JSBSim::aerosurfacesDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aerosurfacesDataReader::_local_id = "IDL:JSBSim/aerosurfacesDataReader:1.0";

JSBSim::aerosurfacesDataReader_ptr JSBSim::aerosurfacesDataReader::_duplicate (JSBSim::aerosurfacesDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aerosurfacesDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aerosurfacesDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aerosurfacesDataReader_ptr JSBSim::aerosurfacesDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::aerosurfacesDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aerosurfacesDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::aerosurfacesDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aerosurfacesDataReader_ptr JSBSim::aerosurfacesDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aerosurfacesDataReader_ptr result;
   result = dynamic_cast < JSBSim::aerosurfacesDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aerosurfacesDataReaderView::_local_id = "IDL:JSBSim/aerosurfacesDataReaderView:1.0";

JSBSim::aerosurfacesDataReaderView_ptr JSBSim::aerosurfacesDataReaderView::_duplicate (JSBSim::aerosurfacesDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aerosurfacesDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aerosurfacesDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aerosurfacesDataReaderView_ptr JSBSim::aerosurfacesDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::aerosurfacesDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aerosurfacesDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::aerosurfacesDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aerosurfacesDataReaderView_ptr JSBSim::aerosurfacesDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aerosurfacesDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::aerosurfacesDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::gearsTypeSupportInterface::_local_id = "IDL:JSBSim/gearsTypeSupportInterface:1.0";

JSBSim::gearsTypeSupportInterface_ptr JSBSim::gearsTypeSupportInterface::_duplicate (JSBSim::gearsTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::gearsTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::gearsTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::gearsTypeSupportInterface_ptr JSBSim::gearsTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::gearsTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::gearsTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::gearsTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::gearsTypeSupportInterface_ptr JSBSim::gearsTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::gearsTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::gearsTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::gearsDataWriter::_local_id = "IDL:JSBSim/gearsDataWriter:1.0";

JSBSim::gearsDataWriter_ptr JSBSim::gearsDataWriter::_duplicate (JSBSim::gearsDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::gearsDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::gearsDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::gearsDataWriter_ptr JSBSim::gearsDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::gearsDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::gearsDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::gearsDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::gearsDataWriter_ptr JSBSim::gearsDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::gearsDataWriter_ptr result;
   result = dynamic_cast < JSBSim::gearsDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::gearsDataReader::_local_id = "IDL:JSBSim/gearsDataReader:1.0";

JSBSim::gearsDataReader_ptr JSBSim::gearsDataReader::_duplicate (JSBSim::gearsDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::gearsDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::gearsDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::gearsDataReader_ptr JSBSim::gearsDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::gearsDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::gearsDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::gearsDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::gearsDataReader_ptr JSBSim::gearsDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::gearsDataReader_ptr result;
   result = dynamic_cast < JSBSim::gearsDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::gearsDataReaderView::_local_id = "IDL:JSBSim/gearsDataReaderView:1.0";

JSBSim::gearsDataReaderView_ptr JSBSim::gearsDataReaderView::_duplicate (JSBSim::gearsDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::gearsDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::gearsDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::gearsDataReaderView_ptr JSBSim::gearsDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::gearsDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::gearsDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::gearsDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::gearsDataReaderView_ptr JSBSim::gearsDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::gearsDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::gearsDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::inertiaTypeSupportInterface::_local_id = "IDL:JSBSim/inertiaTypeSupportInterface:1.0";

JSBSim::inertiaTypeSupportInterface_ptr JSBSim::inertiaTypeSupportInterface::_duplicate (JSBSim::inertiaTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::inertiaTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::inertiaTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::inertiaTypeSupportInterface_ptr JSBSim::inertiaTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::inertiaTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::inertiaTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::inertiaTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::inertiaTypeSupportInterface_ptr JSBSim::inertiaTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::inertiaTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::inertiaTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::inertiaDataWriter::_local_id = "IDL:JSBSim/inertiaDataWriter:1.0";

JSBSim::inertiaDataWriter_ptr JSBSim::inertiaDataWriter::_duplicate (JSBSim::inertiaDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::inertiaDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::inertiaDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::inertiaDataWriter_ptr JSBSim::inertiaDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::inertiaDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::inertiaDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::inertiaDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::inertiaDataWriter_ptr JSBSim::inertiaDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::inertiaDataWriter_ptr result;
   result = dynamic_cast < JSBSim::inertiaDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::inertiaDataReader::_local_id = "IDL:JSBSim/inertiaDataReader:1.0";

JSBSim::inertiaDataReader_ptr JSBSim::inertiaDataReader::_duplicate (JSBSim::inertiaDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::inertiaDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::inertiaDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::inertiaDataReader_ptr JSBSim::inertiaDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::inertiaDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::inertiaDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::inertiaDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::inertiaDataReader_ptr JSBSim::inertiaDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::inertiaDataReader_ptr result;
   result = dynamic_cast < JSBSim::inertiaDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::inertiaDataReaderView::_local_id = "IDL:JSBSim/inertiaDataReaderView:1.0";

JSBSim::inertiaDataReaderView_ptr JSBSim::inertiaDataReaderView::_duplicate (JSBSim::inertiaDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::inertiaDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::inertiaDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::inertiaDataReaderView_ptr JSBSim::inertiaDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::inertiaDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::inertiaDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::inertiaDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::inertiaDataReaderView_ptr JSBSim::inertiaDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::inertiaDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::inertiaDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aeroTypeSupportInterface::_local_id = "IDL:JSBSim/aeroTypeSupportInterface:1.0";

JSBSim::aeroTypeSupportInterface_ptr JSBSim::aeroTypeSupportInterface::_duplicate (JSBSim::aeroTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aeroTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aeroTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aeroTypeSupportInterface_ptr JSBSim::aeroTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::aeroTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aeroTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::aeroTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aeroTypeSupportInterface_ptr JSBSim::aeroTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aeroTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::aeroTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aeroDataWriter::_local_id = "IDL:JSBSim/aeroDataWriter:1.0";

JSBSim::aeroDataWriter_ptr JSBSim::aeroDataWriter::_duplicate (JSBSim::aeroDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aeroDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aeroDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aeroDataWriter_ptr JSBSim::aeroDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::aeroDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aeroDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::aeroDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aeroDataWriter_ptr JSBSim::aeroDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aeroDataWriter_ptr result;
   result = dynamic_cast < JSBSim::aeroDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aeroDataReader::_local_id = "IDL:JSBSim/aeroDataReader:1.0";

JSBSim::aeroDataReader_ptr JSBSim::aeroDataReader::_duplicate (JSBSim::aeroDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aeroDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aeroDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aeroDataReader_ptr JSBSim::aeroDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::aeroDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aeroDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::aeroDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aeroDataReader_ptr JSBSim::aeroDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aeroDataReader_ptr result;
   result = dynamic_cast < JSBSim::aeroDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aeroDataReaderView::_local_id = "IDL:JSBSim/aeroDataReaderView:1.0";

JSBSim::aeroDataReaderView_ptr JSBSim::aeroDataReaderView::_duplicate (JSBSim::aeroDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aeroDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aeroDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aeroDataReaderView_ptr JSBSim::aeroDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::aeroDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aeroDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::aeroDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aeroDataReaderView_ptr JSBSim::aeroDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aeroDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::aeroDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aerocoefficientTypeSupportInterface::_local_id = "IDL:JSBSim/aerocoefficientTypeSupportInterface:1.0";

JSBSim::aerocoefficientTypeSupportInterface_ptr JSBSim::aerocoefficientTypeSupportInterface::_duplicate (JSBSim::aerocoefficientTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aerocoefficientTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aerocoefficientTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aerocoefficientTypeSupportInterface_ptr JSBSim::aerocoefficientTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::aerocoefficientTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aerocoefficientTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::aerocoefficientTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aerocoefficientTypeSupportInterface_ptr JSBSim::aerocoefficientTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aerocoefficientTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::aerocoefficientTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aerocoefficientDataWriter::_local_id = "IDL:JSBSim/aerocoefficientDataWriter:1.0";

JSBSim::aerocoefficientDataWriter_ptr JSBSim::aerocoefficientDataWriter::_duplicate (JSBSim::aerocoefficientDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aerocoefficientDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aerocoefficientDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aerocoefficientDataWriter_ptr JSBSim::aerocoefficientDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::aerocoefficientDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aerocoefficientDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::aerocoefficientDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aerocoefficientDataWriter_ptr JSBSim::aerocoefficientDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aerocoefficientDataWriter_ptr result;
   result = dynamic_cast < JSBSim::aerocoefficientDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aerocoefficientDataReader::_local_id = "IDL:JSBSim/aerocoefficientDataReader:1.0";

JSBSim::aerocoefficientDataReader_ptr JSBSim::aerocoefficientDataReader::_duplicate (JSBSim::aerocoefficientDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aerocoefficientDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aerocoefficientDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aerocoefficientDataReader_ptr JSBSim::aerocoefficientDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::aerocoefficientDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aerocoefficientDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::aerocoefficientDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aerocoefficientDataReader_ptr JSBSim::aerocoefficientDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aerocoefficientDataReader_ptr result;
   result = dynamic_cast < JSBSim::aerocoefficientDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::aerocoefficientDataReaderView::_local_id = "IDL:JSBSim/aerocoefficientDataReaderView:1.0";

JSBSim::aerocoefficientDataReaderView_ptr JSBSim::aerocoefficientDataReaderView::_duplicate (JSBSim::aerocoefficientDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::aerocoefficientDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::aerocoefficientDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::aerocoefficientDataReaderView_ptr JSBSim::aerocoefficientDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::aerocoefficientDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::aerocoefficientDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::aerocoefficientDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::aerocoefficientDataReaderView_ptr JSBSim::aerocoefficientDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::aerocoefficientDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::aerocoefficientDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::geometricTypeSupportInterface::_local_id = "IDL:JSBSim/geometricTypeSupportInterface:1.0";

JSBSim::geometricTypeSupportInterface_ptr JSBSim::geometricTypeSupportInterface::_duplicate (JSBSim::geometricTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::geometricTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::geometricTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::geometricTypeSupportInterface_ptr JSBSim::geometricTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::geometricTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::geometricTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::geometricTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::geometricTypeSupportInterface_ptr JSBSim::geometricTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::geometricTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::geometricTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::geometricDataWriter::_local_id = "IDL:JSBSim/geometricDataWriter:1.0";

JSBSim::geometricDataWriter_ptr JSBSim::geometricDataWriter::_duplicate (JSBSim::geometricDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::geometricDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::geometricDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::geometricDataWriter_ptr JSBSim::geometricDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::geometricDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::geometricDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::geometricDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::geometricDataWriter_ptr JSBSim::geometricDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::geometricDataWriter_ptr result;
   result = dynamic_cast < JSBSim::geometricDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::geometricDataReader::_local_id = "IDL:JSBSim/geometricDataReader:1.0";

JSBSim::geometricDataReader_ptr JSBSim::geometricDataReader::_duplicate (JSBSim::geometricDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::geometricDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::geometricDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::geometricDataReader_ptr JSBSim::geometricDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::geometricDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::geometricDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::geometricDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::geometricDataReader_ptr JSBSim::geometricDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::geometricDataReader_ptr result;
   result = dynamic_cast < JSBSim::geometricDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::geometricDataReaderView::_local_id = "IDL:JSBSim/geometricDataReaderView:1.0";

JSBSim::geometricDataReaderView_ptr JSBSim::geometricDataReaderView::_duplicate (JSBSim::geometricDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::geometricDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::geometricDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::geometricDataReaderView_ptr JSBSim::geometricDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::geometricDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::geometricDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::geometricDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::geometricDataReaderView_ptr JSBSim::geometricDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::geometricDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::geometricDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::propulsionTypeSupportInterface::_local_id = "IDL:JSBSim/propulsionTypeSupportInterface:1.0";

JSBSim::propulsionTypeSupportInterface_ptr JSBSim::propulsionTypeSupportInterface::_duplicate (JSBSim::propulsionTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::propulsionTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::propulsionTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::propulsionTypeSupportInterface_ptr JSBSim::propulsionTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::propulsionTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::propulsionTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::propulsionTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::propulsionTypeSupportInterface_ptr JSBSim::propulsionTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::propulsionTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::propulsionTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::propulsionDataWriter::_local_id = "IDL:JSBSim/propulsionDataWriter:1.0";

JSBSim::propulsionDataWriter_ptr JSBSim::propulsionDataWriter::_duplicate (JSBSim::propulsionDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::propulsionDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::propulsionDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::propulsionDataWriter_ptr JSBSim::propulsionDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::propulsionDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::propulsionDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::propulsionDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::propulsionDataWriter_ptr JSBSim::propulsionDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::propulsionDataWriter_ptr result;
   result = dynamic_cast < JSBSim::propulsionDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::propulsionDataReader::_local_id = "IDL:JSBSim/propulsionDataReader:1.0";

JSBSim::propulsionDataReader_ptr JSBSim::propulsionDataReader::_duplicate (JSBSim::propulsionDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::propulsionDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::propulsionDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::propulsionDataReader_ptr JSBSim::propulsionDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::propulsionDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::propulsionDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::propulsionDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::propulsionDataReader_ptr JSBSim::propulsionDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::propulsionDataReader_ptr result;
   result = dynamic_cast < JSBSim::propulsionDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::propulsionDataReaderView::_local_id = "IDL:JSBSim/propulsionDataReaderView:1.0";

JSBSim::propulsionDataReaderView_ptr JSBSim::propulsionDataReaderView::_duplicate (JSBSim::propulsionDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::propulsionDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::propulsionDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::propulsionDataReaderView_ptr JSBSim::propulsionDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::propulsionDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::propulsionDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::propulsionDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::propulsionDataReaderView_ptr JSBSim::propulsionDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::propulsionDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::propulsionDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::initialConditionsTypeSupportInterface::_local_id = "IDL:JSBSim/initialConditionsTypeSupportInterface:1.0";

JSBSim::initialConditionsTypeSupportInterface_ptr JSBSim::initialConditionsTypeSupportInterface::_duplicate (JSBSim::initialConditionsTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::initialConditionsTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::initialConditionsTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::initialConditionsTypeSupportInterface_ptr JSBSim::initialConditionsTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::initialConditionsTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::initialConditionsTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::initialConditionsTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::initialConditionsTypeSupportInterface_ptr JSBSim::initialConditionsTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::initialConditionsTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::initialConditionsTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::initialConditionsDataWriter::_local_id = "IDL:JSBSim/initialConditionsDataWriter:1.0";

JSBSim::initialConditionsDataWriter_ptr JSBSim::initialConditionsDataWriter::_duplicate (JSBSim::initialConditionsDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::initialConditionsDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::initialConditionsDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::initialConditionsDataWriter_ptr JSBSim::initialConditionsDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::initialConditionsDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::initialConditionsDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::initialConditionsDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::initialConditionsDataWriter_ptr JSBSim::initialConditionsDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::initialConditionsDataWriter_ptr result;
   result = dynamic_cast < JSBSim::initialConditionsDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::initialConditionsDataReader::_local_id = "IDL:JSBSim/initialConditionsDataReader:1.0";

JSBSim::initialConditionsDataReader_ptr JSBSim::initialConditionsDataReader::_duplicate (JSBSim::initialConditionsDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::initialConditionsDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::initialConditionsDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::initialConditionsDataReader_ptr JSBSim::initialConditionsDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::initialConditionsDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::initialConditionsDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::initialConditionsDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::initialConditionsDataReader_ptr JSBSim::initialConditionsDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::initialConditionsDataReader_ptr result;
   result = dynamic_cast < JSBSim::initialConditionsDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::initialConditionsDataReaderView::_local_id = "IDL:JSBSim/initialConditionsDataReaderView:1.0";

JSBSim::initialConditionsDataReaderView_ptr JSBSim::initialConditionsDataReaderView::_duplicate (JSBSim::initialConditionsDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::initialConditionsDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::initialConditionsDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::initialConditionsDataReaderView_ptr JSBSim::initialConditionsDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::initialConditionsDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::initialConditionsDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::initialConditionsDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::initialConditionsDataReaderView_ptr JSBSim::initialConditionsDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::initialConditionsDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::initialConditionsDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::subSystemsTypeSupportInterface::_local_id = "IDL:JSBSim/subSystemsTypeSupportInterface:1.0";

JSBSim::subSystemsTypeSupportInterface_ptr JSBSim::subSystemsTypeSupportInterface::_duplicate (JSBSim::subSystemsTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::subSystemsTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::subSystemsTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::subSystemsTypeSupportInterface_ptr JSBSim::subSystemsTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemsTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::subSystemsTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::subSystemsTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::subSystemsTypeSupportInterface_ptr JSBSim::subSystemsTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemsTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::subSystemsTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::subSystemsDataWriter::_local_id = "IDL:JSBSim/subSystemsDataWriter:1.0";

JSBSim::subSystemsDataWriter_ptr JSBSim::subSystemsDataWriter::_duplicate (JSBSim::subSystemsDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::subSystemsDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::subSystemsDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::subSystemsDataWriter_ptr JSBSim::subSystemsDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemsDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::subSystemsDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::subSystemsDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::subSystemsDataWriter_ptr JSBSim::subSystemsDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemsDataWriter_ptr result;
   result = dynamic_cast < JSBSim::subSystemsDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::subSystemsDataReader::_local_id = "IDL:JSBSim/subSystemsDataReader:1.0";

JSBSim::subSystemsDataReader_ptr JSBSim::subSystemsDataReader::_duplicate (JSBSim::subSystemsDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::subSystemsDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::subSystemsDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::subSystemsDataReader_ptr JSBSim::subSystemsDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemsDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::subSystemsDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::subSystemsDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::subSystemsDataReader_ptr JSBSim::subSystemsDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemsDataReader_ptr result;
   result = dynamic_cast < JSBSim::subSystemsDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::subSystemsDataReaderView::_local_id = "IDL:JSBSim/subSystemsDataReaderView:1.0";

JSBSim::subSystemsDataReaderView_ptr JSBSim::subSystemsDataReaderView::_duplicate (JSBSim::subSystemsDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::subSystemsDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::subSystemsDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::subSystemsDataReaderView_ptr JSBSim::subSystemsDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemsDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::subSystemsDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::subSystemsDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::subSystemsDataReaderView_ptr JSBSim::subSystemsDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemsDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::subSystemsDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::subSystemOutTypeSupportInterface::_local_id = "IDL:JSBSim/subSystemOutTypeSupportInterface:1.0";

JSBSim::subSystemOutTypeSupportInterface_ptr JSBSim::subSystemOutTypeSupportInterface::_duplicate (JSBSim::subSystemOutTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::subSystemOutTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::subSystemOutTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::subSystemOutTypeSupportInterface_ptr JSBSim::subSystemOutTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemOutTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (JSBSim::subSystemOutTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < JSBSim::subSystemOutTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::subSystemOutTypeSupportInterface_ptr JSBSim::subSystemOutTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemOutTypeSupportInterface_ptr result;
   result = dynamic_cast < JSBSim::subSystemOutTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::subSystemOutDataWriter::_local_id = "IDL:JSBSim/subSystemOutDataWriter:1.0";

JSBSim::subSystemOutDataWriter_ptr JSBSim::subSystemOutDataWriter::_duplicate (JSBSim::subSystemOutDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::subSystemOutDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::subSystemOutDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::subSystemOutDataWriter_ptr JSBSim::subSystemOutDataWriter::_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemOutDataWriter_ptr result = NULL;
   if (p && p->_is_a (JSBSim::subSystemOutDataWriter::_local_id))
   {
      result = dynamic_cast < JSBSim::subSystemOutDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::subSystemOutDataWriter_ptr JSBSim::subSystemOutDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemOutDataWriter_ptr result;
   result = dynamic_cast < JSBSim::subSystemOutDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::subSystemOutDataReader::_local_id = "IDL:JSBSim/subSystemOutDataReader:1.0";

JSBSim::subSystemOutDataReader_ptr JSBSim::subSystemOutDataReader::_duplicate (JSBSim::subSystemOutDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::subSystemOutDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::subSystemOutDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::subSystemOutDataReader_ptr JSBSim::subSystemOutDataReader::_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemOutDataReader_ptr result = NULL;
   if (p && p->_is_a (JSBSim::subSystemOutDataReader::_local_id))
   {
      result = dynamic_cast < JSBSim::subSystemOutDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::subSystemOutDataReader_ptr JSBSim::subSystemOutDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemOutDataReader_ptr result;
   result = dynamic_cast < JSBSim::subSystemOutDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * JSBSim::subSystemOutDataReaderView::_local_id = "IDL:JSBSim/subSystemOutDataReaderView:1.0";

JSBSim::subSystemOutDataReaderView_ptr JSBSim::subSystemOutDataReaderView::_duplicate (JSBSim::subSystemOutDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean JSBSim::subSystemOutDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, JSBSim::subSystemOutDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

JSBSim::subSystemOutDataReaderView_ptr JSBSim::subSystemOutDataReaderView::_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemOutDataReaderView_ptr result = NULL;
   if (p && p->_is_a (JSBSim::subSystemOutDataReaderView::_local_id))
   {
      result = dynamic_cast < JSBSim::subSystemOutDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

JSBSim::subSystemOutDataReaderView_ptr JSBSim::subSystemOutDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   JSBSim::subSystemOutDataReaderView_ptr result;
   result = dynamic_cast < JSBSim::subSystemOutDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}



